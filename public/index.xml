<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation Hugo on Une documentation en français pour Hugo</title>
    <link>https://dochugo.christopheducamp.com/</link>
    <description>Recent content in Documentation Hugo on Une documentation en français pour Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dochugo.christopheducamp.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Documentation Hugo</title>
      <link>https://dochugo.christopheducamp.com/documentation/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/documentation/</guid>
      <description>Hugo est le moteur de site web statique le plus rapide du monde. Il est écrit en Go (aka Golang) et développé par bep, spf13 et leurs amis. Vous trouverez en dessous quelques-unes des pages les plus communes et utiles extraites de notre documentation.</description>
    </item>
    
    <item>
      <title>C&#39;est quoi Hugo ?</title>
      <link>https://dochugo.christopheducamp.com/demarrage/intro-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/intro-hugo/</guid>
      <description>Source &amp;ldquo;Introduction to Hugo&amp;rdquo; par Steve Francia (auteur d&amp;rsquo;Hugo) - traduction en cours ouverte à toutes vos améliorations.
 C’est Quoi Hugo ? Hugo est un framework de site Web généraliste. Techniquement parlant, Hugo est un générateur de site statique. Contrairement à d&amp;rsquo;autres systèmes qui créent dynamiquement une page chaque fois qu&amp;rsquo;un visiteur en fait la demande, Hugo lance la construction lorsque vous créez votre contenu. Étant donné que les sites Web sont affichés beaucoup plus souvent qu&amp;rsquo;ils ne sont édités, Hugo est optimisé pour l&amp;rsquo;affichage du site tout en offrant une excellente expérience d&amp;rsquo;écriture.</description>
    </item>
    
    <item>
      <title>Hugo QuickStart</title>
      <link>https://dochugo.christopheducamp.com/demarrage/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/quickstart/</guid>
      <description>Source originale
 Ce guide de démarrage rapide a été initialement écrit par Shekhar Gulati dans sa série &amp;ldquo;52 Technologies in 2016&amp;rdquo; mais a été largement modifié pour inclure les nouvelles fonctionnalités et modifications apportées à Hugo.  Construire une Bibliothèque Dans ce guide de démarrage, nous allons construire une bibliothèque qui listera les livres et leurs critiques.
Étape 1. Installez Hugo Installez Hugo. Si vous installez à partir des Versions Hugo, vous devrez sauvegarder l&amp;rsquo;exécutable principal sous hugo(ou hugo.</description>
    </item>
    
    <item>
      <title>Installer Hugo</title>
      <link>https://dochugo.christopheducamp.com/demarrage/installer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/installer/</guid>
      <description>Installer Hugo sur macOS, Windows, Linux, FreeBSD et sur toute machine où peut tourner l&amp;rsquo;outil de compilation Go. Source &amp;ldquo;Install Hugo - documentation officielle Hugo, demeurant le seul lien de référence. Traduction en cours.
Il y a beaucoup de discussions concernant &amp;ldquo;Hugo écrit en Go&amp;rdquo;, mais vous n&amp;rsquo;avez pas besoin d&amp;rsquo;installer Go pour apprécier Hugo. Prenez juste une binaire précompilée !
 Hugo est écrit en Go avec le support de nombreuses plates-formes.</description>
    </item>
    
    <item>
      <title>Utiliser Hugo</title>
      <link>https://dochugo.christopheducamp.com/demarrage/utiliser-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/utiliser-hugo/</guid>
      <description>Source &amp;ldquo;Using Hugo - documentation officielle Hugo, demeurant le seul lien de référence.
 Assurez-vous que Hugo est dans votre PATH (ou fournissez un chemin). Testez en lançant :
$ hugo help hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: benchmark Benchmark Hugo by building a site a number of times.</description>
    </item>
    
    <item>
      <title>Configurer Hugo</title>
      <link>https://dochugo.christopheducamp.com/demarrage/configurer-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/configurer-hugo/</guid>
      <description>Source &amp;ldquo;Configuring Hugo - documentation officielle Hugo, demeurant le seul lien de référence.
 La structure de répertoire d&amp;rsquo;un site Web Hugo - ou plus précisément, l&amp;rsquo;organisation source des fichiers contenant le contenu du site web et ses modèles - fournit la plupart des informations de configuration dont Hugo a besoin pour générer un site web fini.
Ce qui fait que par essence, de nombreux sites Web n&amp;rsquo;auraient pas besoin d&amp;rsquo;un tel fichier de configuration.</description>
    </item>
    
    <item>
      <title>Organisation des Sources Hugo</title>
      <link>https://dochugo.christopheducamp.com/demarrage/organisation-sources-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/organisation-sources-hugo/</guid>
      <description>Source &amp;ldquo;Source Organization&amp;rdquo; - documentation officielle Hugo, demeurant le seul lien de référence.
 Hugo prend un dossier unique et l&amp;rsquo;utilise comme l&amp;rsquo;input pour créer un site web complet.
Le niveau supérieur d&amp;rsquo;un répertoire source aura généralement les éléments suivants :
▸ archetypes/ ▸ content/ ▸ data/ ▸ i18n/ ▸ layouts/ ▸ static/ ▸ themes/ config.toml  Apprenez-en plus sur les différents dossiers et quels sont leurs objectifs
 config data i18n archetypes content layouts static themes  Exemple Un répertoire exemple peut ressembler à ce qui suit :</description>
    </item>
    
    <item>
      <title>Structure de Dossier</title>
      <link>https://dochugo.christopheducamp.com/demarrage/structure-dossier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/demarrage/structure-dossier/</guid>
      <description>L&amp;rsquo;interface de ligne de commande d&amp;rsquo;Hugo échafaude une structure de projet en dossiers et puis prend cet unique dossier et l&amp;rsquo;utilise comme l&amp;rsquo;input pour créer un site web complet.
Échafaudage de Nouveau Site L&amp;rsquo;exécution du générateur hugo new site à partir de la ligne de commande créera une structure de répertoire avec les éléments suivants :
. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes  Explication de la Structure des Dossiers Ce qui suit est un survol de chacun des dossiers avec les liens vers leurs sections respectives dans la documentation Hugo.</description>
    </item>
    
    <item>
      <title>C&#39;est quoi Hugo</title>
      <link>https://dochugo.christopheducamp.com/a-propos/intro-hugo/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/a-propos/intro-hugo/</guid>
      <description>Hugo est un framework général de site Web. Techniquement parlant, Hugo est un générateur de site statique. Contrairement aux systèmes qui créent dynamiquement une page à chaque requête de visiteur, Hugo construit des pages lorsque vous créez ou mettez à jour votre contenu. Étant donné que les sites Web sont consultés beaucoup plus souvent qu&amp;rsquo;ils ne sont édités, Hugo est conçu pour fournir une expérience de visualisation optimale pour les utilisateurs finaux de votre site et une expérience d&amp;rsquo;écriture idéale pour les auteurs de sites.</description>
    </item>
    
    <item>
      <title>Contribuer au Développement d&#39;Hugo</title>
      <link>https://dochugo.christopheducamp.com/contribuer/developpement/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/contribuer/developpement/</guid>
      <description>Introduction Hugo est un projet open source et vit par le travail de ses contributeurs. Il y a plein de problèmes ouverts, et nous avons besoin de votre aide pour rendre Hugo encore plus génial. Vous n&amp;rsquo;avez pas besoin d&amp;rsquo;être un gourou de Go pour contribuer au développement du projet.
Hypothèses Ce guide de contribution est une approche étape-par-étape avec l&amp;rsquo;espoir de pouvoir accueillir de nouveaux venus. Par conséquent, nous supposons seulement ce qui suit :</description>
    </item>
    
    <item>
      <title>Hosting on Netlify</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-netlify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-netlify/</guid>
      <description>Netlify provides continuous deployment services, global CDN, ultra-fast DNS, atomic deploys, instant cache invalidation, one-click SSL, a browser-based interface, a CLI, and many other features for managing your Hugo website.
Assumptions  You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have Hugo website you are ready to deploy and share with the world. You do not already have a Netlify account.  Create a Netlify account Go to app.</description>
    </item>
    
    <item>
      <title>Installer et Utiliser des Thèmes</title>
      <link>https://dochugo.christopheducamp.com/themes/installer-et-utiliser-themes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/themes/installer-et-utiliser-themes/</guid>
      <description>Hugo ne fournit pas actuellement un thème &amp;ldquo;par défaut&amp;rdquo;. Cette décision est intentionnelle. Nous vous laissons décider quel thème convient le mieux à votre projet Hugo.
  Hypothèses  Vous avez déjà installé Hugo sur votre machine de développement. Vous avez installé git sur votre machine et vous êtes à l&amp;rsquo;aise avec un usage basique de git.  Installer des Thèmes Les thèmes apportés par la communauté sur themes.</description>
    </item>
    
    <item>
      <title>Introduction à la Modélisation Hugo</title>
      <link>https://dochugo.christopheducamp.com/templates/introduction/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/introduction/</guid>
      <description>Ce qui suit n&amp;rsquo;est qu&amp;rsquo;une version simplifiée des modèles Go. Pour un examen approfondi des modèles Go, consultez le document officiel Go docs.
 Les modèles Go fournissent un langage de modèle extrêmement simple respectant la conviction que seule la logique la plus élémentaire appartient au modèle ou à la couche vue.
Syntaxe Basique Les modèles Golang sont des fichiers HTML avec l&amp;rsquo;ajout de variables et de fonctions. Les variables et les fonctions du modèle Golang sont accessibles dans {{ }}.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo</title>
      <link>https://dochugo.christopheducamp.com/outils/migrations/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/migrations/</guid>
      <description>This section highlights some projects around Hugo that are independently developed. These tools try to extend the functionality of our static site generator or help you to get started.
 Do you know or maintain a similar project around Hugo? Feel free to open a pull request on GitHub if you think it should be added.
  Take a look at this list of migration tools if you currently use other logging tools like Jekyll or WordPress but intend to switch to Hugo instead.</description>
    </item>
    
    <item>
      <title>Organisation du Contenu</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/organisation/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/organisation/</guid>
      <description>Cette section n&amp;rsquo;est pas mise à jour avec le support de nouvelles sections imbriquées dans Hugo 0.24, voir https://github.com/gohugoio/hugoDocs/issues/36
 Organisation du Contenu Source Dans Hugo, votre contenu doit être organisé d&amp;rsquo;une manière qui reflète le site Web rendu.
Alors que Hugo prend en charge le contenu imbriqué à n&amp;rsquo;importe quel niveau, les niveaux supérieurs (c&amp;rsquo;est-à-dire content/&amp;lt;DOSSIERS&amp;gt;) sont spéciaux dans Hugo et sont considérés comme le contenu sections. Sans aucune configuration supplémentaire, les éléments suivants vont simplement fonctionner :</description>
    </item>
    
    <item>
      <title>Site</title>
      <link>https://dochugo.christopheducamp.com/variables/site/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/site/</guid>
      <description>Voici une liste de variables (&amp;ldquo;globales) au niveau-site. Bon nombres de ces variables sont définies dans votre fichier de configuration du site, tandis que d&amp;rsquo;autres sont construites à l&amp;rsquo;intérieur du noyau d&amp;rsquo;Hugo pour un usage pratique dans vos modèles.
Liste de Variables Site  .Site.AllPages array of all pages, regardless of their translation. .Site.Author a map of the authors as defined in the site configuration. .Site.BaseURL the base URL for the site as defined in the site configuration.</description>
    </item>
    
    <item>
      <title>Ordre de Recherche Hugo</title>
      <link>https://dochugo.christopheducamp.com/templates/ordre-recherche/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/ordre-recherche/</guid>
      <description>Avant de créer vos modèles, il est important de savoir comment Hugo recherche des fichiers dans la structure de répertoire de votre projet.
Hugo utilise une liste prioritaire appelée ordre de recherche car elle traverse votre dossier layouts dans votre projet Hugo en cherchant le modèle approprié pour rendre votre contenu.
L&amp;rsquo;ordre de recherche de modèle est une cascade inversée : si le modèle A n&amp;rsquo;est pas présent ou spécifié, Hugo se tournera vers le modèle B.</description>
    </item>
    
    <item>
      <title>Formats de Sortie Personnalisés</title>
      <link>https://dochugo.christopheducamp.com/templates/formats-output/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/formats-output/</guid>
      <description>Cette page décrit comment configurer correctement votre site avec les types de médias et les formats de sortie, ainsi que l&amp;rsquo;endroit où créer vos modèles pour vos sorties personnalisées.
Types de Média Un media type (aussi connu comme le MIME type et le content type) est un identifiant en deux-parties pour les formats de fichier et les formats de contenus transmis sur internet.
Il s&amp;rsquo;agit de l&amp;rsquo;ensemble complet des types de médias intégrés dans Hugo :</description>
    </item>
    
    <item>
      <title>Hosting on Firebase</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-firebase/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-firebase/</guid>
      <description>Assumptions  You have an account with Firebase. (If you don&amp;rsquo;t, you can sign up for free using your Google account.) You have completed the Quick Start or have a completed Hugo website ready for deployment.  Initial setup Go to the Firebase console and create a new project (unless you already have a project). You will need to globally install firebase-tools (node.js):
npm install -g firebase-tools  Log in to Firebase (setup on your local machine) using firebase login, which opens a browser where you can select your account.</description>
    </item>
    
    <item>
      <title>Shortcode</title>
      <link>https://dochugo.christopheducamp.com/variables/shortcodes/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/shortcodes/</guid>
      <description>Les shortcodes ont accès aux paramètres délimités dans la déclaration shortcode via .Get, les variables de page- et au niveau-site, et aussi aux champs spécifiques suivants :
 .Parent fournit un accès au contexte parent du shortcode dans les shortcodes imbriqués. Ce peut être très utile pour l&amp;rsquo;héritage de paramètres communs shortcode provenant de la racine. .IsNamedParams booléen qui renvoie true quand le shortcode en question utilise des paramètres nommés plutôt que positionnels .</description>
    </item>
    
    <item>
      <title>Contribuer à la Documentation Hugo</title>
      <link>https://dochugo.christopheducamp.com/contribuer/documentation/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/contribuer/documentation/</guid>
      <description>Créez votre Fork Il est préférable d&amp;rsquo;apporter des modifications aux documents Hugo sur votre machine locale pour vérifier la cohérence du style visuel. Assurez-vous que vous avez créé une bifurcation de hugoDocs sur GitHub et cloné le dépôt localement sur votre machine. Pour plus d&amp;rsquo;informations, vous pouvez voir la documentation de GitHub sur &amp;ldquo;forking&amp;rdquo; ou suivre avec le guide de contribution au développement de Hugo.
Vous pouvez ensuite créer une branche distincte pour vos ajouts.</description>
    </item>
    
    <item>
      <title>Les Fonctionnalités Hugo</title>
      <link>https://dochugo.christopheducamp.com/a-propos/features/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/a-propos/features/</guid>
      <description>Général  Temps de construction extrêmement rapides (&amp;lt; 1 ms par page) Complètement inter-plates-formes, avec installation facile sur macOS, Linux, Windows, et plus encore Rendus des modifications à la volée avec LiveReload pendant que vous développez Générateur de thèmes puissant Hébergement de votre site où vous voulez  Organisation  Organisation immédiate pour vos projets, y compris les sections du site Web URLs personnalisables Prise en charge de taxonomies configurables, y compris les catégories et les balises Tri du contenu comme vous le désirez à l&amp;rsquo;aide de fonctions puissantes de modélisation Génération automatique table des matières Création de menus dynamiques Support des Pretty URLs Suppor du modèle de Lien permanent Redirection via aliases  Contenu  Support natif du Markdown et Emacs Org-Mode, tout comme d&amp;rsquo;autres langages via des external helpers (voir formats supportés) Support métadonnées TOML, YAML, et JSON dans le front matter Page d&amp;rsquo;accueil personnalisable Plusieurs types de contenu Résumés de contenu automatiques et définies par l&amp;rsquo;utilisateur raccourcis-code pour activer le contenu riche dans le Markdown Fonctionnalité &amp;ldquo;Minutes to Read&amp;rdquo; Fonctionnalité &amp;ldquo;Wordcount&amp;rdquo;  Fonctionnalités supplémentaires  Support intégré de commentaires Disqus Support intégré de Google Analytics Création automatique de RSS Support pour les modèles HTML Go, Amber, et Ace Enlumineur de syntaxe motorisé par Pygments  Regardez ce qui arrive bientôt dans la [roadmap Hugo][].</description>
    </item>
    
    <item>
      <title>Modèles de Base et Blocs</title>
      <link>https://dochugo.christopheducamp.com/templates/base/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/base/</guid>
      <description>Le mot-clé block vous permet de définir l&amp;rsquo;enveloppe externe de vos pages, d&amp;rsquo;un ou plusieurs modèles maîtres et ensuite de les remplir ou d&amp;rsquo;écraser des portions si nécessaire.
Ordre de Recherche du Modèle de Base L&amp;rsquo;ordre de recherche pour les modèles de base se fait comme suit :
 /layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/&amp;lt;TYPE&amp;gt;-baseof.html /layouts/&amp;lt;TYPE&amp;gt;/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/&amp;lt;TYPE&amp;gt;/baseof.html /layouts/section/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/section/baseof.html /layouts/_default/post-baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/post-baseof.html /layouts/_default/baseof.html /themes/&amp;lt;THEME&amp;gt;/layouts/_default/baseof.html  Les variables sont indiquées par un texte en majuscule défini dans &amp;lt;&amp;gt;.</description>
    </item>
    
    <item>
      <title>Personnaliser un Thème</title>
      <link>https://dochugo.christopheducamp.com/themes/personnaliser/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/themes/personnaliser/</guid>
      <description>Voici les concepts clés pour la personnalisation d&amp;rsquo;un site Hugo avec des thèmes. Hugo vous permet de compléter ou remplacer tout modèle de thème ou fichier statique par des fichiers dans votre répertoire de travail.
Lorsque vous utilisez un thème cloné à partir de son dépôt git, ne modifiez pas directement les fichiers du thème. Au lieu de cela, la personnalisation du thème dans Hugo est une question de remplacer les modèles mis à votre disposition dans un thème.</description>
    </item>
    
    <item>
      <title>Surbrillance de Syntaxe</title>
      <link>https://dochugo.christopheducamp.com/outils/syntax-highlighting/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/syntax-highlighting/</guid>
      <description>Hugo peut mettre en surbrillance le code source de deux manières différentes&amp;mdash;soit du côté du serveur à partir de votre contenu, soit en différant le traitement côté client, en utilisant une bibliothèque JavaScript.
Côté-serveur For the pre-processed approach, highlighting is performed by an external Python-based program called Pygments and is triggered via an embedded Hugo shortcode (see example below). If Pygments is absent from the path, it will silently simply pass the content along without highlighting.</description>
    </item>
    
    <item>
      <title>Page</title>
      <link>https://dochugo.christopheducamp.com/variables/page/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/page/</guid>
      <description>Voici une liste des variables au niveau de la page. Beaucoup d&amp;rsquo;entre elles seront définies dans le front matter, dérivées à partir de l&amp;rsquo;emplacement du fichier ou extraites du contenu lui-même.
Voir .Scratch pour des variables inscriptibles à l&amp;rsquo;échelle de la page.
 Variables Page  .AlternativeOutputFormats contient tous les formats alternatifs pour une page donnée ; cette variable est une liste link rel particulièrement utile dans vos &amp;lt;head&amp;gt; de site.</description>
    </item>
    
    <item>
      <title>Formats de Contenus Supportés</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/formats/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/formats/</guid>
      <description>Markdown est le principal format de contenu et il est livré avec deux saveurs : l&amp;rsquo;excellent projet Blackfriday (nommez vos fichiers *.md ou réglez markup = &amp;quot;markdown&amp;quot; dans le front matter) ou son fork Mmark (nommez vos fichiers *.mmark ou réglez markup = &amp;quot;mmark&amp;quot; dans le front matter), tous les deux étant deux moteurs rapides markdown écrits en Go.
Pour les utilisateurs d&amp;rsquo;Emacs, goorgeous fournit un support natif intégré pour Org-mode (nommez vos fichiers *.</description>
    </item>
    
    <item>
      <title>Listes de Contenu dans Hugo</title>
      <link>https://dochugo.christopheducamp.com/templates/listes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/listes/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un Modèle de Page de Liste ? Un modèle de page de liste est un modèle utilisé pour rendre plusieurs éléments de contenu dans une seule page HTML. L&amp;rsquo;exception à cette règle est la page d&amp;rsquo;accueil, qui est toujours une liste, mais dispose de son propre modèle dédié.
Hugo utilise le terme list dans son vrai sens ; c&amp;rsquo;est-à-dire une disposition séquentielle du contenu, en particulier dans l&amp;rsquo;ordre alphabétique ou numérique.</description>
    </item>
    
    <item>
      <title>Starter Kits</title>
      <link>https://dochugo.christopheducamp.com/outils/starter-kits/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/starter-kits/</guid>
      <description>Know of a Hugo-related starter kit that isn&amp;rsquo;t mentioned here? Please add it to the list.
 The following starter kits are developed by active members of the Hugo community. If you find yourself having issues with any of the projects, it&amp;rsquo;s best to file an issue directly with the project&amp;rsquo;s maintainer(s).
   Victor Hugo. Victor Hugo is a Hugo boilerplate for creating truly epic websites using Gulp + Webpack as an asset pipeline.</description>
    </item>
    
    <item>
      <title>Créer un Thème</title>
      <link>https://dochugo.christopheducamp.com/themes/creer/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/themes/creer/</guid>
      <description>Si vous créez un thème avec des plans pour le partager avec la communauté, utilisez des URL relatives puisque les utilisateurs de votre thème ne peuvent pas publier à partir de la racine de leur site. Voir relURL et absURL.
  Hugo peut initialiser un nouveau dossier de thème blanc dans votre dossier existant themes en utilisant la commande hugo new :
hugo new theme [nom]  Composant du Thème Un thème se compose de modèles et d&amp;rsquo;éléments statiques tels que les fichiers javascript et css.</description>
    </item>
    
    <item>
      <title>Les Avantages des Générateurs de Sites Statiques</title>
      <link>https://dochugo.christopheducamp.com/a-propos/avantages/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/a-propos/avantages/</guid>
      <description>Le but des générateurs de sites Web est de transformer le contenu en fichiers HTML. La plupart sont des &amp;ldquo;générateurs de sites dynamiques&amp;rdquo;. Cela signifie que le serveur HTTP &amp;mdash;c&amp;rsquo;est-à-dire le programme qui envoie des fichiers à afficher dans le navigateur&amp;mdash; exécute le générateur pour créer un nouveau fichier HTML chaque fois qu&amp;rsquo;un utilisateur final demande une page.
Au fil du temps, des générateurs de sites dynamiques ont été programmés pour mettre en cache leurs fichiers HTML afin d&amp;rsquo;éviter des retards inutiles dans la livraison de pages aux utilisateurs finaux.</description>
    </item>
    
    <item>
      <title>Modèle Page Accueil</title>
      <link>https://dochugo.christopheducamp.com/templates/pageaccueil/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/pageaccueil/</guid>
      <description>La page d&amp;rsquo;accueil est une Page et par conséquent elle dispose de toutes les variables de page et variables de site disponibles pour utilisation.
Le Seul Modèle Requis Le modèle de la page d&amp;rsquo;accueil est le seul modèle requis pour la construction d&amp;rsquo;un site et donc utile lors du démarrage d&amp;rsquo;un nouveau site et d&amp;rsquo;un nouveau modèle. Il est également le seul modèle requis si vous développez un site Web à page unique.</description>
    </item>
    
    <item>
      <title>Taxonomy</title>
      <link>https://dochugo.christopheducamp.com/variables/taxonomy/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/taxonomy/</guid>
      <description>Variables de Page de Termes de Taxonomie Les pages de termes de taxonomie sont du type Page et ont les variables supplémentaires qui suivent.
Par exemple, les champs suivants seraient disponibles dans layouts/_defaults/terms.html, selon la façon dont vous organisez vos modèles de taxonomie :
 .Data.Singular Le nom au singulier de la taxonomie (par ex., tags =&amp;gt;tag`) .Data.Plural Le nom au pluriel de la taxonomie (par ex., tags =&amp;gt; tags) .</description>
    </item>
    
    <item>
      <title>Add Your Hugo Theme to the Showcase</title>
      <link>https://dochugo.christopheducamp.com/contribuer/themes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/contribuer/themes/</guid>
      <description>A collection of all themes created by the Hugo community, including screenshots and demos, can be found at https://themes.gohugo.io. Every theme in this list will automatically be added to the theme site. Theme updates aren&amp;rsquo;t scheduled but usually happen at least once a week.
tl;dr  Create your theme using hugo new theme &amp;lt;THEMENAME&amp;gt;; Test your theme against https://github.com/spf13/HugoBasicExample * Add a theme.toml file to the root of the theme with all required metadata Add a descriptive README.</description>
    </item>
    
    <item>
      <title>Front Matter</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/front-matter/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/front-matter/</guid>
      <description>Le Front matter vous permet de garder les métadonnées attachées à une instance d&amp;rsquo;un type de contenu &amp;mdash;c&amp;rsquo;est-à-dire incorporée dans un fichier de contenu&amp;mdash; et c&amp;rsquo;est l&amp;rsquo;une des nombreuses fonctionnalités qui donne à Hugo sa force.
Formats de Front Matter Hugo prend en charge trois formats pour le front matter, chacun avec ses propres jetons d&amp;rsquo;identification.
 TOML identifié par des +++ d&amp;rsquo;ouverture et de fermeture. YAML identifié par des --- d&amp;rsquo;ouverture et de fermeture.</description>
    </item>
    
    <item>
      <title>Presse et Articles</title>
      <link>https://dochugo.christopheducamp.com/news/press-and-articles/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/press-and-articles/</guid>
      <description>Vous avez connaissance d&amp;rsquo;un billet, article ou tutoriel sur Hugo ? Ajoutez-le à cette liste.
  Hugo a été présenté dans les articles de blog, presse et médias suivants.
  Title Author Date     A visit to the Workshop: Hugo/Unix/Vim integration fREW Schmidt 2017-07-22   Hugo Easy Gallery - Automagical PhotoSwipe image gallery with a one-line shortcode Li-Wen Yip 2017-03-25   Automagical Image Gallery in Hugo with PhotoSwipe and jQuery Li-Wen Yip 2017-03-04   Adding Isso Comments to Hugo Stíobhart Matulevicz 2017-02-24   Hugo Tutorial: How to Build &amp;amp; Host a (Very Fast) Static E-Commerce Site Snipcart 2017-02-23   How to Password Protect a Hugo Site Aerobatic 2017-02-19   Switching from Wordpress to Hugo Mario Martelli 2017-02-19   Zero to HTTP/2 with AWS and Hugo Josh Habdas 2017-02-16   Deploy a Hugo site to Aerobatic with CircleCI Aerobatic 2017-02-14   NPM scripts for building and deploying Hugo site Aerobatic 2017-02-12   Getting started with Hugo and the plain-blog theme, on NearlyFreeSpeech.</description>
    </item>
    
    <item>
      <title>Hosting on GitHub</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-github/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-github/</guid>
      <description>GitHub provides free and fast static hosting over SSL for personal, organization, or project pages directly from a GitHub repository via its GitHub Pages service.
Assumptions  You have Git 2.5 or greater installed on your machine. You have a GitHub account. Signing up for GitHub is free. You have a ready-to-publish Hugo website or have at least completed the Quick Start.  If you are working within an Organization account or want to set up a User website on GitHub and would like more information, refer to the GitHub Pages documentation.</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/shortcodes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/shortcodes/</guid>
      <description>C&amp;rsquo;est Quoi un Shortcode Hugo adore le Markdown en raison de son format de contenu simple, mais il arrive parfois que Markdown échoue. Souvent, les auteurs de contenu sont forcés d&amp;rsquo;ajouter du HTML brut (par exemple, la vidéo &amp;lt;iframes&amp;gt;) au contenu Markdown. Nous pensons que cela va à l&amp;rsquo;encontre de la belle promesse de simplicité de la syntaxe de Markdown.
Hugo a créé les shortcodes pour contourner ces limitations.</description>
    </item>
    
    <item>
      <title>Frontend Interfaces with Hugo</title>
      <link>https://dochugo.christopheducamp.com/outils/frontends/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/frontends/</guid>
      <description>enwrite. Enwrite enables evernote-powered, statically generated blogs and websites. Now posting to your blog or updating your website is as easy as writing a new note in Evernote! caddy-hugo. caddy-hugo is an add-on for Caddy that delivers a good UI to edit the content of your Hugo website. Lipi. Lipi is a native GUI frontend written in Java to manage your Hugo websites.  Commercial Services  Appernetic.io is a Hugo Static Site Generator as a Service that is easy to use for non-technical users.</description>
    </item>
    
    <item>
      <title>Modèles de Page de Section</title>
      <link>https://dochugo.christopheducamp.com/templates/section-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/section-templates/</guid>
      <description>Ajouter du Contenu et un Front Matter aux Modèles de Section Pour tirer parti efficacement des modèles de page de section, vous devez d&amp;rsquo;abord comprendre l&amp;rsquo;organisation de contenu et en particulier, le but de _index.md pour ajouter du contenu et un front matter à la section et aux autres pages de la liste.
Odre de Recherche du Modèle de Section Voici l&amp;rsquo;ordre de recherche pour les modèles de section</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://dochugo.christopheducamp.com/variables/files/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/files/</guid>
      <description>Pour plus d&amp;rsquo;informations sur la création de shortcodes et de modèles qui utilisent le jeu de fonctionnalités liées aux fichiers de Hugo, voir Modèles de fichiers locaux.
 L&amp;rsquo;objet .File contient les champs suivants :
 .File.Path the original relative path of the page (e.g., content/posts/foo.en.md) .File.LogicalName the name of the content file that represents a page (e.g., foo.en.md) .File.TranslationBaseName the filename without extension or optional language identifier (e.g., foo) .</description>
    </item>
    
    <item>
      <title>Hosting on GitLab</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-gitlab/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-gitlab/</guid>
      <description>GitLab makes it incredibly easy to build, deploy, and host your Hugo website via their free GitLab Pages service, which provides native support for Hugo, as well as numerous other static site generators.
Assumptions  Working familiarity with Git for version control Completion of the Hugo Quick Start A GitLab account A Hugo website on your local machine that you are ready to publish  Create .gitlab-ci.yml cd your-hugo-site  In the root directory of your Hugo site, create a .</description>
    </item>
    
    <item>
      <title>Menu</title>
      <link>https://dochugo.christopheducamp.com/variables/menus/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/menus/</guid>
      <description>Le modèle menu a les propriétés suivantes :
 .URL string .Name string .Menu string .Identifier string .Pre template.HTML .Post template.HTML .Weight int .Parent string .Children Menu  </description>
    </item>
    
    <item>
      <title>Hosting on Bitbucket</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-bitbucket/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/hosting-on-bitbucket/</guid>
      <description>You can use Bitbucket and Aerobatic to build, deploy, and host a Hugo website. Aerobatic is a static hosting service that integrates with Bitbucket and provides a free hosting tier.
Assumptions  Working familiarity with Git for version control A Bitbucket account  Install Aerobatic CLI If you haven&amp;rsquo;t previously used Aerobatic, you&amp;rsquo;ll first need to install the Command Line Interface (CLI) and create an account. For a list of all commands available, see the Aerobatic CLI docs.</description>
    </item>
    
    <item>
      <title>Editor Plug-ins for Hugo</title>
      <link>https://dochugo.christopheducamp.com/outils/editors/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/editors/</guid>
      <description>The Hugo community uses a wide range of preferred tools and has developed plug-ins for some of the most popular text editors to help automate parts of your workflow.
Sublime Text  Hugofy. Hugofy is a plugin for Sublime Text 3 to make life easier to use Hugo static site generator.  Visual Studio Code  Hugofy. Hugofy is a plugin for Visual Studio Code to &amp;ldquo;make life easier&amp;rdquo; when developing with Hugo.</description>
    </item>
    
    <item>
      <title>Modèles de Taxonomie</title>
      <link>https://dochugo.christopheducamp.com/templates/taxonomie-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/taxonomie-templates/</guid>
      <description>Hugo supporte les groupes de contenu définis par l&amp;rsquo;utilisateur appelés taxonomies. Les taxonomies sont des classifications qui démontrent des relations logiques entre le contenu. Voir Taxonomies sous Gestion de contenu si vous n&amp;rsquo;êtes pas familier avec la façon dont Hugo exploite cette puissante fonctionnalité.
Hugo offre de multiples façons d&amp;rsquo;utiliser des taxonomies tout au long de vos modèles de projet :
 Ordonne la manière dont les termes d&amp;rsquo;une taxonomie sont affichés dans un modèle de termes de taxonomie Trier la manière dont le contenu associé à un terme de taxonomie est affiché dans un modèle de liste de taxonomie Liste les termes de la taxonomie d&amp;rsquo;un seul contenu dans un modèle de page unique  Modèles de Liste Taxonomique Les modèles de liste taxononomique sont des listes et par conséquent, ils ont toutes les variables et méthodes disponibles sur les pages de listes.</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>https://dochugo.christopheducamp.com/a-propos/roadmap/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/a-propos/roadmap/</guid>
      <description>Pour suivre le progrès d&amp;rsquo;Hugo, regardez nos milestones GitHub.
Sans aucun ordre particulier, voici quelques autres fonctionnalités actuellement en cours :
 Déploiement encore plus simple vers S3, SSH, GitHub, rsync. Mettre une photo à la section hébergement et déploiement. Importation à partir d&amp;rsquo;autres systèmes de site Web. Il existe déjà les outils de migration existants, mais ils ne couvrent pas toutes les principales plates-formes. Un éditeur interactif basé sur le Web (voir la discussion sur le forum associé D&amp;rsquo;autres thèmes, qui sont toujours en cours et vos contributions sont les bienvenues !</description>
    </item>
    
    <item>
      <title>Sections de Contenu</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/sections/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/sections/</guid>
      <description>Cette section n&amp;rsquo;est pas mise à jour avec le support des sections imbriquées dans Hugo 0.24, voir https://github.com/gohugoio/hugoDocs/issues/36
 Hugo croit que vous organisez votre contenu avec un but. La même structure qui fonctionne pour organiser votre contenu source est utilisée pour organiser le site rendu (voir structure des dossiers).
Suivant ce modèle, Hugo utilise le niveau supérieur de votre organisation de contenu comme la section de contenu.
L&amp;rsquo;exemple suivant montre une structure de répertoire de contenu pour un site Web qui comporte trois sections : &amp;ldquo;auteurs&amp;rdquo;, &amp;ldquo;evenements&amp;rdquo; et &amp;ldquo;articles&amp;rdquo; :</description>
    </item>
    
    <item>
      <title>Variables Hugo</title>
      <link>https://dochugo.christopheducamp.com/variables/hugo/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/hugo/</guid>
      <description>Elle contient les champs suivants :
 .Hugo.Generator le tag &amp;lt;meta&amp;gt; pour la version d&amp;rsquo;Hugo qui a généré le site. .Hugo.Generator sort une balise HTML complète ; par ex. &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.18&amp;quot; /&amp;gt; .Hugo.Version la version actuelle de la binaire Hugo que vous utilisez par ex. 0.13-DEV
 .Hugo.CommitHash le hash de commit git de la binaire d&amp;rsquo;Hugo par ex.0e8bed9ccffba0df554728b46c5bbf6d78ae5247 .Hugo.BuildDate la date de compilation de la binaire actuellle Hugo formaté aec la RFC 3339 par ex.</description>
    </item>
    
    <item>
      <title>Deployment with Wercker</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/deployment-with-wercker/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/deployment-with-wercker/</guid>
      <description>Goals By the end of this guide, you will have completed the following:
 Creating a basic Hugo project and website Version controlling your project with Git Adding your project to GitHub Automating site deployments with a free tool called Wercker Deploying your website to GitHub Pages for free hosting  Assumptions  You have a working familiarity with using Git for version control You have a GitHub account You have already created a basic Hugo project  If you do not meet these assumptions, the GitHub help section has an explanation of how to install and use git.</description>
    </item>
    
    <item>
      <title>Modèles de Page Unique</title>
      <link>https://dochugo.christopheducamp.com/templates/single-page-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/single-page-templates/</guid>
      <description>Ordre de Recherche de Modèle de Page Unique Vous pouvez spécifier le type de contenu et le layout dans un fichier de contenu front matter. Toutefois, vous ne pouvez pas spécifier section car cela est déterminé en fonction de l&amp;rsquo;emplacement du fichier (voir section contenu).
Hugo suppose que votre section de contenu et le type de contenu sont les mêmes, à moins que vous ne le dites à Hugo en fournissant un type directement dans le front matter d&amp;rsquo;un fichier de contenu.</description>
    </item>
    
    <item>
      <title>Search for your Hugo Website</title>
      <link>https://dochugo.christopheducamp.com/outils/search/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/search/</guid>
      <description>A static website with a dynamic search function? Yes. As alternatives to embeddable scripts from Google or other search engines, you can provide your visitors a custom search by indexing your content files directly.
 Hugoidx is an experimental application to create a search index. It&amp;rsquo;s built on top of Bleve. GitHub Gist for Hugo Workflow. This gist contains a simple workflow to create a search index for your static website.</description>
    </item>
    
    <item>
      <title>Types de Contenus</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/types/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/types/</guid>
      <description>Un type de contenu peut avoir un ensemble unique de métadonnées (par ex., front matter) ou un modèle et peut être créé par la commande hugo new via les archetypes.
Qu&amp;rsquo;est-ce Qu&amp;rsquo;un Type de Contenu Tumblr est un bel exemple de site web avec plusieurs types de contenus. Un morceau de &amp;ldquo;contenu&amp;rdquo; pourrait être une photo, une citation, ou un article, chacun avec différents ensembles de métadonnées et différents rendus visuels.</description>
    </item>
    
    <item>
      <title>Licence Apache</title>
      <link>https://dochugo.christopheducamp.com/a-propos/licence/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/a-propos/licence/</guid>
      <description>Les version Hugo v0.15 et suivantes sont publiées sous la licence Apache 2.0. Les versions précédentes d&amp;rsquo;Hugo ont été publiées sous une Licence Publique Simple.
  Version 2.0, January 2004 http://www.apache.org/licenses/LICENSE-2.0
Terms and Conditions for use, reproduction, and distribution
1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</description>
    </item>
    
    <item>
      <title>Git Info Variables</title>
      <link>https://dochugo.christopheducamp.com/variables/git/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/git/</guid>
      <description>Hugo&amp;rsquo;s Git integrations should be fairly performant but can increase your build time. This will depend on the size of your Git history.
  .GitInfo Prerequisites  The Hugo site must be in a Git-enabled directory. The Git executable must be installed and in your system PATH. The .GitInfo feature must be enabled in your Hugo project by passing --enableGitInfo flag on the command line or by setting enableGitInfo to true in your site&amp;rsquo;s configuration file.</description>
    </item>
    
    <item>
      <title>Archétypes</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/archetypes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/archetypes/</guid>
      <description>Cette section est dépréciée, voir https://github.com/gohugoio/hugoDocs/issues/11
 C&amp;rsquo;est quoi les Archétypes ? Les archétypes sont des fichiers de contenu dans le dossier archetypes de votre projet qui contiennent des front matter préconfigurés pour les types de contenu de votre site web. Les archétypes facilitent le maintient de métadonnées cohérentes sur le contenu de votre site Web et permettent aux auteurs de contenu de générer rapidement des instances d&amp;rsquo;un type de contenu via la commande hugo new.</description>
    </item>
    
    <item>
      <title>Deployment with Rysnc</title>
      <link>https://dochugo.christopheducamp.com/hebergement-et-deploiement/deployment-with-rsync/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/hebergement-et-deploiement/deployment-with-rsync/</guid>
      <description>Assumptions  Access to your web host with SSH A functional static website built with Hugo  The spoiler is that you can deploy your entire website with a command that looks like the following:
hugo &amp;amp;&amp;amp; rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/  As you will see, we put it in a shell script file, which makes building and deployment as easy as executing ./deploy.
Install SSH Key If it is not done yet, we will make an automated way to SSH to your server.</description>
    </item>
    
    <item>
      <title>Modèles de Vues de Contenu</title>
      <link>https://dochugo.christopheducamp.com/templates/views/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/views/</guid>
      <description>Ces alternatives de vues de contenu sont particulièrement utiles dans les modèles de liste.
Voici les cas d&amp;rsquo;utilisation courants pour les vues de contenu :
 Vous souhaitez que le contenu de chaque type soit affiché sur la page d&amp;rsquo;accueil, mais uniquement avec des vues de résumés. Vous voulez seulement une liste à puces de votre contenu sur une page de liste de taxonomie. Les vues font que cela est très simple en déléguant le rendu de chaque type de contenu différent au contenu lui-même.</description>
    </item>
    
    <item>
      <title>Other Hugo Community Projects</title>
      <link>https://dochugo.christopheducamp.com/outils/other/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/outils/other/</guid>
      <description>And for all the other small things around Hugo:
 hugo-gallery lets you create an image gallery for Hugo sites. flickr-hugo-embed prints shortcodes to embed a set of images from an album on Flickr into Hugo. hugo-openapispec-shortcode A shortcode that allows you to include Open API Spec (formerly known as Swagger Spec) in a page. HugoPhotoSwipe makes it easy to create image galleries using PhotoSwipe. Hugo SFTP Upload Syncs the local build of your Hugo website with your remote webserver via SFTP.</description>
    </item>
    
    <item>
      <title>Sitemap Variables</title>
      <link>https://dochugo.christopheducamp.com/variables/sitemap/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/variables/sitemap/</guid>
      <description>A sitemap is a Page and therefore has all the page variables available to use sitemap templates. They also have the following sitemap-specific variables available to them:
 .Sitemap.ChangeFreq the page change frequency .Sitemap.Priority the priority of the page .Sitemap.Filename the sitemap filename  </description>
    </item>
    
    <item>
      <title>Modèles de Data</title>
      <link>https://dochugo.christopheducamp.com/templates/data-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/data-templates/</guid>
      <description>Hugo prend en charge le chargement des données des fichiers YAML, JSON et TOML situés dans le dossier data placé à la racine de votre projet Hugo.
Le Dossier Data Le dossier data est l&amp;rsquo;endroit où vous pouvez stocker des données supplémentaires à utiliser par Hugo lors de la génération de votre site. Les fichiers de données ne sont pas utilisés pour générer des pages autonomes ; ils sont destinés à être complémentaires aux fichiers de contenu.</description>
    </item>
    
    <item>
      <title>Taxonomies</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/taxonomies/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/taxonomies/</guid>
      <description>Qu&amp;rsquo;est-ce Qu&amp;rsquo;une Taxonomie ? Hugo prend en charge les groupages de contenu définis par l&amp;rsquo;utilisateur appelés taxonomies. Les taxonomies sont les classifications des relations logiques entre les contenus.
Définitions  Taxonomie une catégorisation qui peut être utilisée pour classifier du contenu Terme une clé dans la taxonomie Valeur un morceau de contenu assigné à un terme  Exemple de Taxonomie : Site Web Cinéma Supposons que nous produisons un site web sur le cinéma.</description>
    </item>
    
    <item>
      <title>Modèles Partiels</title>
      <link>https://dochugo.christopheducamp.com/templates/partials/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/partials/</guid>
      <description>Ordre de Recherche dans le Modèle Partiel Les modèles partiels&amp;mdash;comme les modèles de page unique et les modèles de page liste&amp;mdash;ont un ordre de recherche spécifique. Néanmoins, les partiels sont plus simples dans le fait que Hugo ne vérifiera que deux endroits :
 layouts/partials/*&amp;lt;NOMPARTIEL&amp;gt;.html themes/&amp;lt;THEME&amp;gt;/layouts/partials/*&amp;lt;NOMPARTIEL&amp;gt;.html  Ce qui permet à un utilisateur final de thème de copier un contenu de partiel à l&amp;rsquo;intérieur d&amp;rsquo;un fichier du même nom pour une personnalisation.</description>
    </item>
    
    <item>
      <title>Résumés de Contenu</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/resumes/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/resumes/</guid>
      <description>Avec l&amp;rsquo;usage de la [variable de page][pagevariables] .Summary, Hugo génère des résumés de contenu à utiliser comme version courte dans les vues résumées.
Options de Fractionnement du Résumé  Fractionnement de Résumé défini-par-Hugo Fractionnement de Résumé défini par l&amp;rsquo;utilisateur  Il est naturel d&amp;rsquo;accompagner le résumé avec des liens vers le contenu d&amp;rsquo;origine, et un modèle de conception commun est de voir ce lien sous la forme d&amp;rsquo;un bouton &amp;ldquo;Lire la suite &amp;hellip;&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Créer Vos Propres Shortcodes</title>
      <link>https://dochugo.christopheducamp.com/templates/shortcode-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/shortcode-templates/</guid>
      <description>Les codes courts sont un moyen de consolider les modèles en petits fragments réutilisables que vous pouvez intégrer directement dans votre contenu. Dans ce sens, vous pouvez considérer les codes courts comme l&amp;rsquo;intermédiaire entre des modèles de page et de liste et des fichiers de contenu de base.
 Hugo est également livré avec des codes courts intégrés pour les cas d&amp;rsquo;usage courant. (Voir Gestion du contenu : Shortcodes.)</description>
    </item>
    
    <item>
      <title>Références Croisées</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/cross-references/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/cross-references/</guid>
      <description>Les shortcodes ref et relref lient ensemble les documents, ceux qui sont en shortcodes intégrés Hugo. Ces shortcodes sont utilisés pour fournir des liens vers les titres à l&amp;rsquo;intérieur de votre contenu, que ce soit entre les documents ou dans un document. La seule différence entre ref et relref est respectivement si l&amp;rsquo;URL résultante est absolue (http://1.com/about/) ou relative (/about/).
Utilisez ref et relref {{&amp;lt; ref &amp;quot;document&amp;quot; &amp;gt;}} {{&amp;lt; ref &amp;quot;#ancre&amp;quot; &amp;gt;}} {{&amp;lt; ref &amp;quot;document#ancre&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;document&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;#ancre&amp;quot; &amp;gt;}} {{&amp;lt; relref &amp;quot;document#ancre&amp;quot; &amp;gt;}}  L&amp;rsquo;unique paramètre de ref est une chaîne avec un contenu nomdocument (par ex.</description>
    </item>
    
    <item>
      <title>Gestion des URLs</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/urls/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/urls/</guid>
      <description>Permaliens Le répertoire cible Hugo par défaut pour votre site Web construit est public/. Toutefois, vous pouvez modifier cette valeur en spécifiant un publishDir différent dans la configuration de votre site. Les répertoires créés au moment de la construction pour une section reflètent la position du répertoire du contenu dans le dossier content et l&amp;rsquo;espace de noms correspondant à sa mise en page dans la hiérarchie contentdir.
L&amp;rsquo;option permalinks dans votre configuration de site vous permet d&amp;rsquo;ajuster les chemins de répertoires (c&amp;rsquo;est-à-dire les URL) en fonction de chaque section.</description>
    </item>
    
    <item>
      <title>Fichier Local</title>
      <link>https://dochugo.christopheducamp.com/templates/files/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/files/</guid>
      <description>Traverser les Fichiers Locaux Avec les fonctions de template readDir et readFile d&amp;rsquo;Hugo, vous pouvez traverser vos fichiers de site web sur votr serveru.
Utilisez readDir La fonction readDir renvoie une liste de os.FileInfo. Cela prend le path du fichier comme un argument de chaîne unique. Ce chemin peut être vers n&amp;rsquo;importe quel dossier de votre site web (par ex, comme trouvé sur votre système de fichier du serveur).</description>
    </item>
    
    <item>
      <title>Menus</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/menus/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/menus/</guid>
      <description>Si tout ce que vous voulez est un simple menu pour vos sections, regardez la &amp;ldquo;Section Menu pour Blogueurs Paresseux&amp;rdquo; dans les Modèles de Menu.
 Vous pouvez faire ça :
 Placez le contenu dans un ou plusieurs menus Gérez les menus imbriqués avec une profondeur illimitée Créez des entrées de menu sans les rattacher à aucun contenu Distinguer l&amp;rsquo;élément actif (et la branche active)  Qu&amp;rsquo;est-ce qu&amp;rsquo;un Menu dans Hugo ?</description>
    </item>
    
    <item>
      <title>Personnaliser Page 404</title>
      <link>https://dochugo.christopheducamp.com/templates/404/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/404/</guid>
      <description>Lorsque vous utilisez Hugo avec GitHub Pages, vous pouvez fournir votre propre modèle pour une page d&amp;rsquo;erreur 404 personnalisée en créant un fichier modèle 404.html dans votre dossier /layouts. Lorsque Hugo génère votre site, le fichier 404.html sera placé dans la racine.
Les pages 404 auront toutes les variables de page habituelles à utiliser dans les modèles.
En plus des variables de page standard, la page 404 a accès à tout le contenu du site accessible à partir de .</description>
    </item>
    
    <item>
      <title>Modèles de Menu</title>
      <link>https://dochugo.christopheducamp.com/templates/menus/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/menus/</guid>
      <description>Hugo ne fait aucune hypothèse sur la façon dont votre rendu HTML sera structuré. Au lieu de cela, il fournit toutes les fonctions dont vous avez besoin pour créer votre menu comme vous le souhaitez.
Voici un exemple :
layouts/partials/sidebar.html  &amp;lt;!-- sidebar start --&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;div id=&amp;quot;sidebar&amp;quot; class=&amp;quot;nav-collapse&amp;quot;&amp;gt; &amp;lt;!-- sidebar menu start--&amp;gt; &amp;lt;ul class=&amp;quot;sidebar-menu&amp;quot;&amp;gt; {{ $currentPage := . }} {{ range .Site.Menus.main }} {{ if .HasChildren }} &amp;lt;li class=&amp;quot;sub-menu{{if $currentPage.</description>
    </item>
    
    <item>
      <title>Table des Matières</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/toc/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/toc/</guid>
      <description>Actuellement, la variable de page {{.TableOfContents}} ne vous permet pas de spécifier quels niveaux de titres vous voulez afficher dans la TDM. Voir la discussion en rapport sur GitHub (#1778). En tant que telle, la &amp;lt;nav id=&amp;quot;TableOfContents&amp;quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/nav&amp;gt; commencera sur &amp;lt;h1&amp;gt; au moment d&amp;rsquo;extraire à partir de {{.Content}}.
 Usage Créez votre markdown comme vous le feriez normalement avec les titres appropriés. Voici un exemple de contenu :
&amp;lt;!-- Votre front matter en place ici --&amp;gt; ## Introduction One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin.</description>
    </item>
    
    <item>
      <title>Commentaires</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/commentaires/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/commentaires/</guid>
      <description>Hugo est livré avec le support pour Disqus, un service tiers qui fournit des fonctionnalités de commentaires et de communauté aux sites via JavaScript.
Votre thème peut déjà supporter Disqus, mais sinon, il est facile de l&amp;rsquo;ajouter à vos modèles via le partiel Disqus intégré dans Hugo.
Ajouter Disqus Hugo est livré avec tout le code dont vous avez besoin pour charger Disqus dans vos modèles. Avant d&amp;rsquo;ajouter Disqus à votre site, vous devrez configurer un compte.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://dochugo.christopheducamp.com/templates/pagination/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/pagination/</guid>
      <description>Le vrai pouvoir de la pagination Hugo brille quand elle est combinée avec la fonction where et ses opérateurs de type SQL : first, last, and after. Vous pouvez même ordonner le contenu de la façon que vous aviez l&amp;rsquo;habitude de faire avec Hugo.
Configurer la Pagination La pagination peut être configurée dans votre configuration de site:
 Paginate default = 10. Ce réglage peut être annulé dans le modèle.</description>
    </item>
    
    <item>
      <title>RSS</title>
      <link>https://dochugo.christopheducamp.com/templates/rss/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/rss/</guid>
      <description>Odre de Recherche du Modèle RSS You can use a single RSS template to generate all of your RSS feeds or create a specific template for each individual feed.
 /layouts/section/&amp;lt;section&amp;gt;.rss.xml /layouts/_default/rss.xml /themes/&amp;lt;theme&amp;gt;/layouts/section/&amp;lt;section&amp;gt;.rss.xml /themes/&amp;lt;theme&amp;gt;/layouts/_default/rss.xml   Hugo ships with its own RSS 2.0 template. The embedded template will be sufficient for most use cases.
  RSS pages are of the type Page and have all the page variables available to use in the templates.</description>
    </item>
    
    <item>
      <title>Mode Multilingue</title>
      <link>https://dochugo.christopheducamp.com/gestion-contenu/multilingue/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/gestion-contenu/multilingue/</guid>
      <description>Vous devriez définir les langues disponibles dans une section Languages à l&amp;rsquo;intérieur de la configuration de votre site.
Configurer les Langues Ce qui suit est un exemple de configuration de site TOML pour un projet Hugo multilingue :
config.toml  DefaultContentLanguage = &amp;quot;en&amp;quot; copyright = &amp;quot;Everything is mine&amp;quot; [params.navigation] help = &amp;quot;Help&amp;quot; [Languages] [Languages.en] title = &amp;quot;My blog&amp;quot; weight = 1 [Languages.en.params] linkedin = &amp;quot;english-link&amp;quot; [Languages.fr] copyright = &amp;quot;Tout est à moi&amp;quot; title = &amp;quot;Mon blog&amp;quot; weight = 2 [Languages.</description>
    </item>
    
    <item>
      <title>Sitemap</title>
      <link>https://dochugo.christopheducamp.com/templates/sitemap-template/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/sitemap-template/</guid>
      <description>A single Sitemap template is used to generate the sitemap.xml file. Hugo automatically comes with this template file. No work is needed on the users&amp;rsquo; part unless they want to customize sitemap.xml.
A sitemap is a Page and therefore has all the page variables available to use in this template along with Sitemap-specific ones:
 .Sitemap.ChangeFreq The page change frequency .Sitemap.Priority The priority of the page .Sitemap.Filename The sitemap filename  If provided, Hugo will use /layouts/sitemap.</description>
    </item>
    
    <item>
      <title>Fichier Robots.txt File</title>
      <link>https://dochugo.christopheducamp.com/templates/robots/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/robots/</guid>
      <description>To create your robots.txt as a template, first set the enableRobotsTXT value to true in your configuration file. By default, this option generates a robots.txt with the following content, which tells search engines that they are allowed to crawl everything:
User-agent: *  Ordre de Recherche du Modèle Robots.txt The lookup order for the robots.txt template is as follows:
 /layouts/robots.txt /themes/&amp;lt;THEME&amp;gt;/layout/robots.txt  If you do not want Hugo to create a default robots.</description>
    </item>
    
    <item>
      <title>Modèles Internes</title>
      <link>https://dochugo.christopheducamp.com/templates/internal/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/internal/</guid>
      <description>While the following internal templates are called similar to partials, they do not observe the partial template lookup order.
  Google Analytics Hugo ships with internal templates for Google Analytics tracking, including both synchronous and asynchronous tracking codes.
Configurer Google Analytics Provide your tracking id in your configuration file:
googleAnalytics = &amp;quot;UA-123-45&amp;quot;  googleAnalytics: &amp;quot;UA-123-45&amp;quot;  Utiliser le Modèle Google Analytics You can then include the Google Analytics internal template:</description>
    </item>
    
    <item>
      <title>Alternatives de Modélisation</title>
      <link>https://dochugo.christopheducamp.com/templates/alternatives/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/alternatives/</guid>
      <description>Modèles Ace For template documentation, follow the links from the Ace project.
 Ace templates must be named with the ace-suffix; e.g., list.ace It&amp;rsquo;s possible to use both Go templates and Ace templates side by side and even include one into the other Full Go template syntax support, including all the useful helper template functions Partials can be included both with the Ace and the Go template syntax. For example, the following two will have the same output in Ace:  = include partials/foo.</description>
    </item>
    
    <item>
      <title>Debuguer les Modèles</title>
      <link>https://dochugo.christopheducamp.com/templates/template-debugging/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/templates/template-debugging/</guid>
      <description>Here are some snippets you can add to your template to answer some common questions.
These snippets use the printf function available in all Go templates. This function is an alias to the Go function, fmt.Printf.
Quelles Variables sont Disponibles dans ce Contexte ? You can use the template syntax, $., to get the top-level template context from anywhere in your template. This will print out all the values under, .</description>
    </item>
    
    <item>
      <title>Créer un Partiel h-card</title>
      <link>https://dochugo.christopheducamp.com/chantier-doc-hugo/hcard/</link>
      <pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/chantier-doc-hugo/hcard/</guid>
      <description>Inspiré par l&amp;rsquo;indieweb et le thème de Kevin Marks pour le blog de Christopher Allen (aka @ChristopherA, réfléchir à un partiel h-card sur ce modèle
&amp;lt;div class=&amp;quot;h-card&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;&amp;lt;a class=&amp;quot;u-url u-uid p-name&amp;quot; href=&amp;quot;{{ .Site.Params.authorurl }}&amp;quot; &amp;gt;{{ .Site.Params.author }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;img class=&amp;quot;u-photo&amp;quot; src=&amp;quot;{{ .Site.Params.authorphoto }}&amp;quot; /&amp;gt; &amp;lt;p class=&amp;quot;abstract p-note p-summary&amp;quot;&amp;gt;Principal Architect at Blockstream&amp;lt;br&amp;gt;Internet Cryptography Pioneer&amp;lt;br&amp;gt;Co-author TLS Security Standard&amp;lt;br&amp;gt;Collaborative Tools &amp;amp; Patterns&amp;lt;br&amp;gt;Decentralized Identity&amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;me&amp;quot; class=&amp;quot;u-url&amp;quot; href=&amp;quot;https://twitter.com/ChristopherA&amp;quot;&amp;gt;@ChristopherA&amp;lt;/a&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;me&amp;quot; class=&amp;quot;u-url&amp;quot; href=&amp;quot;https://github.com/ChristopherA&amp;quot;&amp;gt;github&amp;lt;/a&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;me&amp;quot; class=&amp;quot;u-url&amp;quot; href=&amp;quot;http://christophera.</description>
    </item>
    
    <item>
      <title>hugo</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo/</guid>
      <description>hugo hugo construit votre site
Synopsis hugo est la commande princpale, utilisée pour construire votre site Hugo.
Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.
Complete documentation is available at http://gohugo.io/.
hugo [flags]  Options  -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo benchmark</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_benchmark/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_benchmark/</guid>
      <description>hugo benchmark Benchmark Hugo by building a site a number of times.
Synopsis Hugo can build a site many times over and analyze the running process creating a benchmark.
hugo benchmark [flags]  Options  -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo check</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_check/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_check/</guid>
      <description> hugo check Contains some verification checks
Synopsis Contains some verification checks
Options  -h, --help help for check  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo check ulimit - Check system ulimit settings  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo check ulimit</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_check_ulimit/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_check_ulimit/</guid>
      <description> hugo check ulimit Check system ulimit settings
Synopsis Hugo will inspect the current ulimit settings on the system. This is primarily to ensure that Hugo can watch enough files on some OSs
hugo check ulimit [flags]  Options  -h, --help help for ulimit  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo check - Contains some verification checks  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo config</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_config/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_config/</guid>
      <description> hugo config Print the site configuration
Synopsis Print the site configuration, both default and custom settings.
hugo config [flags]  Options  -h, --help help for config  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_convert/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_convert/</guid>
      <description>hugo convert Convert your content to different formats
Synopsis Convert your content (e.g. front matter) to different formats.
See convert&amp;rsquo;s subcommands toJSON, toTOML and toYAML for more information.
Options  -h, --help help for convert -o, --output string filesystem path to write files to -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo convert toJSON</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_convert_tojson/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_convert_tojson/</guid>
      <description> hugo convert toJSON Convert front matter to JSON
Synopsis toJSON converts all front matter in the content directory to use JSON for the front matter.
hugo convert toJSON [flags]  Options  -h, --help help for toJSON  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert toTOML</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_convert_totoml/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_convert_totoml/</guid>
      <description> hugo convert toTOML Convert front matter to TOML
Synopsis toTOML converts all front matter in the content directory to use TOML for the front matter.
hugo convert toTOML [flags]  Options  -h, --help help for toTOML  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo convert toYAML</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_convert_toyaml/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_convert_toyaml/</guid>
      <description> hugo convert toYAML Convert front matter to YAML
Synopsis toYAML converts all front matter in the content directory to use YAML for the front matter.
hugo convert toYAML [flags]  Options  -h, --help help for toYAML  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) -o, --output string filesystem path to write files to --quiet build in quiet mode -s, --source string filesystem path to read files relative from --unsafe enable less safe operations, please backup first -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo convert - Convert your content to different formats  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo env</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_env/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_env/</guid>
      <description> hugo env Print Hugo version and environment info
Synopsis Print Hugo version and environment info. This is useful in Hugo bug reports.
hugo env [flags]  Options  -h, --help help for env  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo gen</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_gen/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_gen/</guid>
      <description>hugo gen A collection of several useful generators.
Synopsis A collection of several useful generators.
Options  -h, --help help for gen  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo gen autocomplete - Generate shell autocompletion script for Hugo hugo gen doc - Generate Markdown documentation for the Hugo CLI.</description>
    </item>
    
    <item>
      <title>hugo gen autocomplete</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_gen_autocomplete/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_gen_autocomplete/</guid>
      <description>hugo gen autocomplete Generate shell autocompletion script for Hugo
Synopsis Generates a shell autocompletion script for Hugo.
NOTE: The current version supports Bash only. This should work for *nix systems with Bash installed.
By default, the file is written directly to /etc/bash_completion.d for convenience, and the command may need superuser rights, e.g.:
$ sudo hugo gen autocomplete  Add --completionfile=/path/to/file flag to set alternative file-path and name.
Logout and in again to reload the completion scripts, or just source them in directly:</description>
    </item>
    
    <item>
      <title>hugo gen doc</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_gen_doc/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_gen_doc/</guid>
      <description>hugo gen doc Generate Markdown documentation for the Hugo CLI.
Synopsis Generate Markdown documentation for the Hugo CLI.
This command is, mostly, used to create up-to-date documentation of Hugo&amp;rsquo;s command-line interface for http://gohugo.io/.
It creates one Markdown file per command with front matter suitable for rendering in Hugo.
hugo gen doc [flags]  Options  --dir string the directory to write the doc. (default &amp;quot;/tmp/hugodoc/&amp;quot;) -h, --help help for doc  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo gen man</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_gen_man/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_gen_man/</guid>
      <description>hugo gen man Generate man pages for the Hugo CLI
Synopsis This command automatically generates up-to-date man pages of Hugo&amp;rsquo;s command-line interface. By default, it creates the man page files in the &amp;ldquo;man&amp;rdquo; directory under the current directory.
hugo gen man [flags]  Options  --dir string the directory to write the man pages. (default &amp;quot;man/&amp;quot;) -h, --help help for man  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo import</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_import/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_import/</guid>
      <description> hugo import Import your site from others.
Synopsis Import your site from other web site generators like Jekyll.
Import requires a subcommand, e.g. hugo import jekyll jekyll_root_path target_path.
Options  -h, --help help for import  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site hugo import jekyll - hugo import from Jekyll  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo import jekyll</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_import_jekyll/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_import_jekyll/</guid>
      <description>hugo import jekyll hugo import from Jekyll
Synopsis hugo import from Jekyll.
Import from Jekyll requires two paths, e.g. hugo import jekyll jekyll_root_path target_path.
hugo import jekyll [flags]  Options  --force allow import into non-empty target directory -h, --help help for jekyll  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo import - Import your site from others.</description>
    </item>
    
    <item>
      <title>hugo list</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_list/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_list/</guid>
      <description> hugo list Liste les différents types de contenu
Synopsis Lister différents types de contenu.
List requiert une sous-commande, par ex. hugo list drafts.
Options  -h, --help help for list -s, --source string filesystem path to read files relative from  Options héritées à partir des commandes parent  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  Voir Aussi  hugo - hugo construit votre site hugo list drafts - Liste toutes les ébauches hugo list expired - Liste tous les post déjà expirés hugo list future - Liste tous les posts datés dans le futur  Auto généré par spf13/cobra le 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list drafts</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_list_drafts/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_list_drafts/</guid>
      <description> hugo list drafts List all drafts
Synopsis List all of the drafts in your content directory.
hugo list drafts [flags]  Options  -h, --help help for drafts  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list expired</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_list_expired/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_list_expired/</guid>
      <description> hugo list expired List all posts already expired
Synopsis List all of the posts in your content directory which has already expired.
hugo list expired [flags]  Options  -h, --help help for expired  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo list future</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_list_future/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_list_future/</guid>
      <description> hugo list future List all posts dated in the future
Synopsis List all of the posts in your content directory which will be posted in the future.
hugo list future [flags]  Options  -h, --help help for future  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo list - Listing out various types of content  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo new</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_new/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_new/</guid>
      <description>hugo new Create new content for your site
Synopsis Create a new content file and automatically set the date and title. It will guess which kind of file to create based on the path provided.
You can also specify the kind with -k KIND.
If archetypes are provided in your theme or site, they will be used.
hugo new [path] [flags]  Options  --editor string edit new content with this editor, if provided -h, --help help for new -k, --kind string content type to create -s, --source string filesystem path to read files relative from  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo new site</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_new_site/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_new_site/</guid>
      <description>hugo new site Create a new site (skeleton)
Synopsis Create a new site in the provided directory. The new site will have the correct structure, but no content or theme yet. Use hugo new [contentPath] to create new content.
hugo new site [path] [flags]  Options  --force init inside non-empty directory -f, --format string config &amp;amp; frontmatter format (default &amp;quot;toml&amp;quot;) -h, --help help for site  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo new theme</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_new_theme/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_new_theme/</guid>
      <description>hugo new theme Create a new theme
Synopsis Create a new theme (skeleton) called [name] in the current directory. New theme is a skeleton. Please add content to the touched files. Add your name to the copyright line in the license and adjust the theme.toml file as you see fit.
hugo new theme [name] [flags]  Options  -h, --help help for theme  Options inherited from parent commands  --config string config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo server</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_server/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_server/</guid>
      <description>hugo server A high performance webserver
Synopsis Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options. Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy.
&amp;lsquo;hugo server&amp;rsquo; will avoid writing the rendered and served content to disk, preferring to store it in memory.</description>
    </item>
    
    <item>
      <title>hugo undraft</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_undraft/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_undraft/</guid>
      <description> hugo undraft Undraft resets the content&amp;rsquo;s draft status
Synopsis Undraft resets the content&amp;rsquo;s draft status and updates the date to the current date and time. If the content&amp;rsquo;s draft status is &amp;lsquo;False&amp;rsquo;, nothing is done.
hugo undraft path/to/content [flags]  Options  -h, --help help for undraft  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>hugo version</title>
      <link>https://dochugo.christopheducamp.com/commands/hugo_version/</link>
      <pubDate>Sun, 16 Jul 2017 23:23:14 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/commands/hugo_version/</guid>
      <description> hugo version Print the version number of Hugo
Synopsis All software has versions. This is Hugo&amp;rsquo;s.
hugo version [flags]  Options  -h, --help help for version  Options inherited from parent commands  --config string config file (default is path/config.yaml|json|toml) --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -v, --verbose verbose output --verboseLog verbose logging  SEE ALSO  hugo - hugo builds your site  Auto generated by spf13/cobra on 16-Jul-2017 </description>
    </item>
    
    <item>
      <title>July Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-25-1/</link>
      <pubDate>Mon, 10 Jul 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-25-1/</guid>
      <description> This is a bug-fix release with a couple of important fixes.
Hugo now has:
 18277+ stars 456+ contributors 170+ themes  Fixes  Fix union when the first slice is empty dbbc5c48 @bep #3686 Navigate to changed on CREATE When working with content from IntelliJ IDE, like WebStorm, every file save is followed by two events: &amp;ldquo;RENAME&amp;rdquo; and then &amp;ldquo;CREATE&amp;rdquo;. 7bcc1ce6 @miltador Final (!) fix for issue with escaped JSON front matter 7f82b41a @bep #3682 Fix issue with escaped JSON front matter 84db6c74 @bep #3682  </description>
    </item>
    
    <item>
      <title>July Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-25/</link>
      <pubDate>Fri, 07 Jul 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-25/</guid>
      <description>Hugo 0.25 is the Kinder Surprise: It automatically opens the page you&amp;#39;re working on in the browser, it adds full AND and OR support in page queries, and you can now have templates per language.
If you start with hugo server --navigateToChanged, Hugo will navigate to the relevant page on save (see animated GIF). This is extremely useful for site-wide edits. Another very useful feature in this version is the added support for AND (intersect) and OR (union) filters when combined with where.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-24-1/</link>
      <pubDate>Sat, 24 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-24-1/</guid>
      <description> This release fixes some important archetype-related regressions from the recent Hugo 0.24-release.
Fixes  Fix archetype regression when no archetype file 4294dd8d @bep #3626 Preserve shortcodes in archetype templates b63e4ee1 @bep #3623 Fix handling of timezones with positive UTC offset (e.g., +0800) in TOML 0744f81e @bep #3628  Enhancements  Create default archetype on new site bfa336d9 @bep #3626  </description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-24/</link>
      <pubDate>Sat, 17 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-24/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A feature that could be the name of the next Indiana Jones movie deserves its own release,&amp;rdquo; says &lt;a href=&#34;https://github.com/bep&#34;&gt;@bep&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hugo now handles the &lt;strong&gt;archetype files as Go templates&lt;/strong&gt;. This means that the issues with sorting and lost comments are long gone. This also means that you will have to supply all values, including title and date. But this also opens up a lot of new windows.&lt;/p&gt;

&lt;p&gt;A fictional example for the section &lt;code&gt;newsletter&lt;/code&gt; and the archetype file &lt;code&gt;archetypes/newsletter.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;{{ replace .TranslationBaseName &amp;quot;-&amp;quot; &amp;quot; &amp;quot; | title }}&amp;quot;
date: {{ .Date }}
draft: true
---

**Insert Lead paragraph here.**



## New Cool Posts

{{ range first 10 ( where .Site.RegularPages &amp;quot;Type&amp;quot; &amp;quot;cool&amp;quot; ) }}
* {{ .Title }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then create a new post with:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-23/</link>
      <pubDate>Fri, 16 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-23/</guid>
      <description>Hugo 0.23 is mainly a release that handles all the small changes needed to get Hugo moved to a GitHub organisation: gohugoio, but it also contains a couple of important fixes that makes this an update worth-while for all.
Hugo now has:
 17739&amp;#43; stars 494&amp;#43; contributors 165&amp;#43; themes  Fixes  Fix handling of duplicate footnotes a9e551a1 @bep #1912 Add support for spaces in project folder for GitInfo #3533 #3552  GitHub organisation related changes  Update layout references to gohugoio/hugo 66d4850b @bep Update content references to gohugoio/hugo 715ff1f8 @bep Add note on updates for rpm-based distros 52a0cea6 @daftaupe Update logo link in README ccb8300d @bep Remove docs building from CI builds 214dbdfb @bep Adjust docs path 729be807 @bep Add docs as submodule 6cee0dfe @bep Update Gitter link in README fbb25014 @bep Change Windows build badge link, take #3 86543d6a @bep Update Windows build link e6ae32a0 @bep Update links in CONTRIBUTING.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-22-1/</link>
      <pubDate>Tue, 13 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-22-1/</guid>
      <description>Hugo 0.22.1 fixes a couple of issues reported after the 0.22 release Monday. Most importantly a fix for detecting regular subfolders below the root-sections.
Also, we forgot to adapt the permalink settings with support for nested sections, which made that feature less useful than it could be.
With this release you can configure permalinks with sections like this:
First level only:
[permalinks] blog = &amp;quot;:section/:title&amp;quot;  Nested (all levels):</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-22/</link>
      <pubDate>Mon, 12 Jun 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-22/</guid>
      <description>Hugo 0.22 brings nested sections, by popular demand and a long sought after feature (#465). We are still low on documentation for this great feature, but @bep has been kind enough to accompany his implementation with a demo site.
This release represents 58 contributions by 10 contributors to the main Hugo code base. Since last release Hugo has gained 420 stars and 2 additional themes.
@bep still leads the Hugo development with his witty Norwegian humor, and once again contributed a significant amount of additions.</description>
    </item>
    
    <item>
      <title>May Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-21/</link>
      <pubDate>Mon, 22 May 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-21/</guid>
      <description>Hugo 0.21 brings full support for shortcodes per Output Format (#3220), the last vital piece of that puzzle. This is especially useful for Google AMP with its many custom media tags.
This release represents 126 contributions by 29 contributors to the main Hugo code base. Since last main release Hugo has gained 850 stars and 7 additional themes.
Hugo now has:
 17156&amp;#43; stars 457&amp;#43; contributors 163&amp;#43; themes  @bep leads the Hugo development with a significant amount of contributions, but also a big shoutout to @moorereason, @bogem, and @munnerz for their ongoing contributions.</description>
    </item>
    
    <item>
      <title>May Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-7/</link>
      <pubDate>Wed, 03 May 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-7/</guid>
      <description> This just fixes an issue with the release scripts, no change in the binaries.
Hugo now has:
 16782&amp;#43; stars 458&amp;#43; contributors 156&amp;#43; themes  Fix  Push the tag before goreleaser is run 3682bf52 @bep #3405  </description>
    </item>
    
    <item>
      <title>Entrées de menu supplémentaires</title>
      <link>https://dochugo.christopheducamp.com/chantier-doc-hugo/extramenu/</link>
      <pubDate>Sat, 29 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/chantier-doc-hugo/extramenu/</guid>
      <description>Vous pouvez définir des entrées de menu supplémentaires dans le menu de navigation sans quelque lien vers le contenu.
Modifiez la configuration du site web config.toml et ajoutez une entrée [[menu.shortcuts]] pour chaque lien que vous voulez ajouter.
Exemple pour le site web actuel, remarquez le param pre qui vous permet d&amp;rsquo;insérer du code HTML et utilisé ici pour séparer le contenu du menu de ce menu &amp;ldquo;statique&amp;rdquo;.
[[menu.shortcuts]] pre = &amp;quot;&amp;lt;h3&amp;gt;Plus&amp;lt;/h3&amp;gt;&amp;quot; name = &amp;quot;&amp;lt;i class=&#39;fa fa-github&#39;&amp;gt;&amp;lt;/i&amp;gt; Repo GitHub&amp;quot; identifier = &amp;quot;ds&amp;quot; url = &amp;quot;https://github.</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-6/</link>
      <pubDate>Thu, 27 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-6/</guid>
      <description> There have been some shouting on discuss.gohugo.io about some broken sites after the release of Hugo 0.20. This release reintroduces the old behaviour, making /my-blog-post/index.md work as expected.
Hugo now has:
 16675&amp;#43; stars 456&amp;#43; contributors 156&amp;#43; themes  Fixes  Avoid index.md in /index/index.html #3396 Make missing GitInfo a WARNING b30ca4be @bep #3376 Fix some of the fpm fields for deb 3bd1d057 @anthonyfok  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-5/</link>
      <pubDate>Tue, 25 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-5/</guid>
      <description>This is a bug-fix release which fixes the version number of 0.20.4 (which wrongly shows up as 0.21-DEV) (#3388).</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-4/</link>
      <pubDate>Mon, 24 Apr 2017 17:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-4/</guid>
      <description> This is the second bug-fix release of the day, fixing a couple of issues related to the new release scripts.
Hugo now has:
 16626&amp;#43; stars 457&amp;#43; contributors 156&amp;#43; themes  Fixes  Fix statically linked binaries 275bcf56 @munnerz #3382 Filename change in Hugo 0.20.3 binaries #3385 Fix version calculation cb3c6b6f @bep  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-3/</link>
      <pubDate>Mon, 24 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-3/</guid>
      <description> This is a bug-fix release with one important fix. But it also adds some harness around GoReleaser to automate the Hugo release process. Big thanks to @caarlos0 for great and super-fast support fixing issues along the way.
Hugo now has:
 16619&amp;#43; stars 458&amp;#43; contributors 156&amp;#43; themes  Enhancement  Automate the Hugo release process 550eba64 @bep #3358  Fix  Fix handling of zero-length files 9bf5c381 @bep #3355  </description>
    </item>
    
    <item>
      <title>Emplacement du Logo Hugo</title>
      <link>https://dochugo.christopheducamp.com/chantier-doc-hugo/logo-draft/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/chantier-doc-hugo/logo-draft/</guid>
      <description>Créez une page _header.md dans le dossier content. Son contenu est ce que vous obtiendrez à l&amp;rsquo;emplacement du logo (tout en haut à gauche de l&amp;rsquo;écran).
Truc : vous pouvez ajouter une image, une combobox avec des liens vers une autre documentation&amp;hellip; Considération pour l&amp;rsquo;emplacement du logo Ne réglez pas [menu.main] dans le frontmatter de votre fichier _header.md  Truc 2 : regardez Entrées de menu statiques supplémentaires si vous voulez ajouter des liens vers un autre site web dans cette barre latérale </description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://dochugo.christopheducamp.com/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/_header/</guid>
      <description>Doc Hugo en français Chantier en cours.</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-2/</link>
      <pubDate>Sun, 16 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-2/</guid>
      <description>Hugo 0.20.2 adds support for plain text partials included into HTML templates. This was a side-effect of the big new Custom Output Format feature in 0.20, and while the change was intentional and there was an ongoing discussion about fixing it in #3273, it did break some themes. There were valid workarounds for these themes, but we might as well get it right.
The most obvious use case for this is inline CSS styles, which you now can do without having to name your partials with a html suffix.</description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20-1/</link>
      <pubDate>Thu, 13 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20-1/</guid>
      <description> Fix logic for base template in work dir vs in the theme #3323 camelCased templates (partials, shortcodes etc.) not found #3333 Live-reload fails with _index.md with paginator #3315 rssURI WARNING always shown #3319  </description>
    </item>
    
    <item>
      <title>April Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-20/</link>
      <pubDate>Mon, 10 Apr 2017 13:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-20/</guid>
      <description>Hugo 0.20 introduces the powerful and long sought after feature Custom Output Formats; Hugo isn’t just that “static HTML with an added RSS feed” anymore. Say hello to calendars, e-book formats, Google AMP, and JSON search indexes, to name a few ( #2828 ).
This release represents over 180 contributions by over 30 contributors to the main Hugo code base. Since last release Hugo has gained 1100 stars, 20 new contributors and 5 additional themes.</description>
    </item>
    
    <item>
      <title>February Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-19/</link>
      <pubDate>Mon, 27 Feb 2017 13:53:58 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-19/</guid>
      <description>We&amp;rsquo;re happy to announce the first release of Hugo in 2017.
This release represents over 180 contributions by over 50 contributors to the main Hugo code base. Since last release Hugo has gained 1450 stars, 35 new contributors, and 15 additional themes.
Hugo now has:
 15200+ stars 470+ contributors 151+ themes  Furthermore, Hugo has its own Twitter account (@gohugoio) where we share bite-sized news and themes from the Hugo community.</description>
    </item>
    
    <item>
      <title>.AddDate</title>
      <link>https://dochugo.christopheducamp.com/fonctions/adddate/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/adddate/</guid>
      <description>The AddDate function takes three arguments in logical order of years, months, and days.
Example: Randomized Tweets from the Last 2 Years Let&amp;rsquo;s assume you have a file at data/tweets.toml that contains a list of Tweets to display on your site&amp;rsquo;s homepage. The file is filled with [[tweet]] blocks; e.g.&amp;mdash;
[[tweet]] name = &amp;quot;Steve Francia&amp;quot; twitter_handle = &amp;quot;@spf13&amp;quot; quote = &amp;quot;I&#39;m creator of Hugo. #metadocreference&amp;quot; link = &amp;quot;https://twitter.com/spf13&amp;quot; date = &amp;quot;2017-01-07T00:00:00Z&amp;quot;  Let&amp;rsquo;s assume you want to grab Tweets from the last two years and present them in a random order.</description>
    </item>
    
    <item>
      <title>.Format</title>
      <link>https://dochugo.christopheducamp.com/fonctions/format/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/format/</guid>
      <description>.Format will format date values defined in your front matter and can be used as a property on the following page variables:
 .PublishDate .Date .LastMod  Assuming a key-value of date: 2017-03-03 in a content file&amp;rsquo;s front matter, your can run the date through .Format followed by a layout string for your desired output at build time:
{{ .PublishDate.Format &amp;quot;January 2, 2006&amp;quot; }} =&amp;gt; March 3, 2017  For formatting any string representations of dates defined in your front matter, see the dateFormat function, which will still leverage the Golang layout string explained below but uses a slightly different syntax.</description>
    </item>
    
    <item>
      <title>.Get</title>
      <link>https://dochugo.christopheducamp.com/fonctions/get/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/get/</guid>
      <description>.Get is specifically used when creating your own shortcode template.</description>
    </item>
    
    <item>
      <title>.GetPage</title>
      <link>https://dochugo.christopheducamp.com/fonctions/getpage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/getpage/</guid>
      <description>Every Page has a Kind attribute that shows what kind of page it is. While this attribute can be used to list pages of a certain kind using where, often it can be useful to fetch a single page by its path.
.GetPage looks up a page of a given Kind and path.
{{ with .Site.GetPage &amp;quot;section&amp;quot; &amp;quot;blog&amp;quot; }}{{ .Title }}{{ end }}  This method wil return nil when no page could be found, so the above will not print anything if the blog section isn&amp;rsquo;t found.</description>
    </item>
    
    <item>
      <title>.Param</title>
      <link>https://dochugo.christopheducamp.com/fonctions/param/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/param/</guid>
      <description>In Hugo, you can declare site-wide params (i.e. in your configuration), as well as params for individual pages.
A common use case is to have a general value for the site and a more specific value for some of the pages (e.g., an image).
You can use the .Param method to call these values into your template. The following will first look for an image param in a specific content&amp;rsquo;s front matter.</description>
    </item>
    
    <item>
      <title>.Scratch</title>
      <link>https://dochugo.christopheducamp.com/fonctions/scratch/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/scratch/</guid>
      <description>Dans la plupart des cas, vous pouvez bien fonctionner sans Scratch, mais il existe des cas d&amp;rsquo;utilisation qui ne sont pas résolus avec les modèles de Go sans l&amp;rsquo;aide de Scratch en raison de problèmes de portée.
Scratch est ajouté à la fois à Page et Shortcode &amp;ndash; avec les méthodes suivantes :
 Set and Add takes a key and the value to add. Get returns the value for the key given.</description>
    </item>
    
    <item>
      <title>.Unix</title>
      <link>https://dochugo.christopheducamp.com/fonctions/unix/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/unix/</guid>
      <description>Example: Time Passed Since Last Modification This very simple one-liner uses now.Unix to calculate the amount of time that has passed between the .LastMod for the current page and the last build of the current page.
time-passed.html  {{ div (sub now.Unix .Lastmod.Unix) 86400 }}    Since both values are integers, they can be subtracted and then divided by the number of seconds in a day (i.e., 60 * 60 * 24 == 86400).</description>
    </item>
    
    <item>
      <title>Caractères Accentués dans les URLs</title>
      <link>https://dochugo.christopheducamp.com/depannage/accented-characters-in-urls/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/depannage/accented-characters-in-urls/</guid>
      <description>Problème : catégories avec des caractères accentués  Une de mes catégories s&amp;rsquo;appelle &amp;ldquo;Le-Carré&amp;rdquo;, mais le lien finit par être généré comme ceci :
`Bash Catégories / le-carr% C3% A9  `
Et ne fonctionne pas. Y a-t-il une solution facile pour cela que je domine ?
 Solution Êtes-vous un utilisateur MacOS ? Si tel est le cas, vous êtes probablement une victime de l&amp;rsquo;insistance du système de fichiers HFS Plus à stocker le caractère &amp;ldquo;é&amp;rdquo; (U+00E9) en mode Décomposition normale (NFD), c&amp;rsquo;est-à-dire sous &amp;ldquo;e&amp;rdquo; + &amp;ldquo; ́&amp;rdquo; (U+0065 U+0301).</description>
    </item>
    
    <item>
      <title>Erreur EOF</title>
      <link>https://dochugo.christopheducamp.com/depannage/eof-error/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/depannage/eof-error/</guid>
      <description>Trouble: hugo new Aborts with EOF error  I&amp;rsquo;m running into an issue where I cannot get archetypes working, when running hugo new showcase/test.md, for example, I see an EOF error thrown by Hugo.
When I run Hugo with v0.12 via hugo new -v showcase/test.md, I see the following output:
INFO: 2015/01/04 Using config file: /private/tmp/test/config.toml INFO: 2015/01/04 attempting to create showcase/test.md of showcase INFO: 2015/01/04 curpath: /private/tmp/test/archetypes/showcase.md ERROR: 2015/01/04 EOF  Is there something that I am blatantly missing?</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://dochugo.christopheducamp.com/fonctions/math/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/math/</guid>
      <description>There are 6 basic mathematical operators that can be used in Hugo templates:
   Function Description Example     add Adds two integers. {{add 1 2}} &amp;rarr; 3   div Divides two integers. {{div 6 3}} &amp;rarr; 2   mod Modulus of two integers. {{mod 15 3}} &amp;rarr; 0   modBool Boolean of modulus of two integers. Evaluates to true if = 0.</description>
    </item>
    
    <item>
      <title>absLangURL</title>
      <link>https://dochugo.christopheducamp.com/fonctions/abslangurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/abslangurl/</guid>
      <description>Both absLangURL and relLangURL are similar to their absURL and relURL relatives but will add the correct language prefix when the site is configured with more than one language.
So for a site baseURL set to http://yoursite.com/hugo/ and the current language is en:
{{ &amp;quot;blog/&amp;quot; | absLangURL }} → &amp;quot;http://yoursite.com/hugo/en/blog/&amp;quot; {{ &amp;quot;blog/&amp;quot; | relLangURL }} → &amp;quot;/hugo/en/blog/&amp;quot;  </description>
    </item>
    
    <item>
      <title>absURL</title>
      <link>https://dochugo.christopheducamp.com/fonctions/absurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/absurl/</guid>
      <description>Both absURL and relURL consider the configured value of baseURL in your site&amp;rsquo;s config file. Given a baseURL set to http://yoursite.com/hugo/:
{{ &amp;quot;mystyle.css&amp;quot; | absURL }} → &amp;quot;http://yoursite.com/hugo/mystyle.css&amp;quot; {{ &amp;quot;mystyle.css&amp;quot; | relURL }} → &amp;quot;/hugo/mystyle.css&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | relURL }} → &amp;quot;http://gohugo.io/&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | absURL }} → &amp;quot;http://gohugo.io/&amp;quot;  The last two examples may look strange but can be very useful. For example, the following shows how to use absURL in JSON-LD structured data (SEO), where some of your images for a piece of content may or may not be hosted locally:</description>
    </item>
    
    <item>
      <title>after</title>
      <link>https://dochugo.christopheducamp.com/fonctions/after/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/after/</guid>
      <description>The following shows after being used in conjunction with the slice function:
{{ $data := slice &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; &amp;quot;three&amp;quot; &amp;quot;four&amp;quot; }} {{ range after 2 $data }} {{ . }} {{ end }} → [&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;]  Example of after with first: 2nd&amp;ndash;4th Most Recent Articles You can use after in combination with the first function and Hugo&amp;rsquo;s powerful sorting methods. Let&amp;rsquo;s assume you have a list page at yoursite.</description>
    </item>
    
    <item>
      <title>apply</title>
      <link>https://dochugo.christopheducamp.com/fonctions/apply/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/apply/</guid>
      <description>apply expects at least three parameters, depending on the function being applied.
 The first parameter is the sequence to operate on The second parameter is the name of the function as a string, which must be the name of a valid Hugo function. After that, the parameters to the applied function are provided, with the string &amp;quot;.&amp;quot; standing in for each element of the sequence the function is to be applied against.</description>
    </item>
    
    <item>
      <title>base64</title>
      <link>https://dochugo.christopheducamp.com/fonctions/base64/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/base64/</guid>
      <description>An example:
base64-input.html  &amp;lt;p&amp;gt;Hello world = {{ &amp;quot;Hello world&amp;quot; | base64Encode }}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;SGVsbG8gd29ybGQ = {{ &amp;quot;SGVsbG8gd29ybGQ=&amp;quot; | base64Decode }}&amp;lt;/p&amp;gt;    base-64-output.html &amp;lt;p&amp;gt;Hello world = SGVsbG8gd29ybGQ=&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;SGVsbG8gd29ybGQ = Hello world&amp;lt;/p&amp;gt;    You can also pass other data types as arguments to the template function which tries to convert them. The following will convert 42 from an integer to a string because both base64Encode and base64Decode always return a string.</description>
    </item>
    
    <item>
      <title>chomp</title>
      <link>https://dochugo.christopheducamp.com/fonctions/chomp/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/chomp/</guid>
      <description>Useful in a pipeline to remove newlines added by other processing (e.g., markdownify).
{{chomp &amp;quot;&amp;lt;p&amp;gt;Blockhead&amp;lt;/p&amp;gt;\n&amp;quot;}} → &amp;quot;&amp;lt;p&amp;gt;Blockhead&amp;lt;/p&amp;gt;&amp;quot;  </description>
    </item>
    
    <item>
      <title>countrunes</title>
      <link>https://dochugo.christopheducamp.com/fonctions/countrunes/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/countrunes/</guid>
      <description>In contrast with countwords function, which counts every word in a string, the countrunes function determines the number of runes in the content and excludes any whitespace. This has specific utility if you are dealing with CJK-like languages.
{{ &amp;quot;Hello, 世界&amp;quot; | countrunes }} &amp;lt;!-- outputs a content length of 8 runes. --&amp;gt;  </description>
    </item>
    
    <item>
      <title>countwords</title>
      <link>https://dochugo.christopheducamp.com/fonctions/countwords/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/countwords/</guid>
      <description>The template function works similar to the .WordCount page variable.
{{ &amp;quot;Hugo is a static site generator.&amp;quot; | countwords }} &amp;lt;!-- outputs a content length of 6 words. --&amp;gt;  </description>
    </item>
    
    <item>
      <title>dateFormat</title>
      <link>https://dochugo.christopheducamp.com/fonctions/dateformat/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/dateformat/</guid>
      <description>dateFormat converts the textual representation of the datetime into the specified format or returns it as a Go time.Time type value. These are formatted with the layout string.
{{ dateFormat &amp;quot;Monday, Jan 2, 2006&amp;quot; &amp;quot;2015-01-21&amp;quot; }} → &amp;quot;Wednesday, Jan 21, 2015&amp;quot;   As of v0.19 of Hugo, the dateFormat function is not supported as part of Hugo&amp;rsquo;s multilingual feature.
  See the Format function for a more complete list of date formatting options in your templates.</description>
    </item>
    
    <item>
      <title>default</title>
      <link>https://dochugo.christopheducamp.com/fonctions/default/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/default/</guid>
      <description>default checks whether a given value is set and returns a default value if it is not. Set in this context means different things depending on date type:
 non-zero for numeric types and times non-zero length for strings, arrays, slices, and maps any boolean or struct value non-nil for any other types  default function examples reference the following content page:
content/posts/default-function-example.md  --- title: Sane Defaults seo_title: date: 2017-02-18 font: oldparam: The default function helps make your templating DRYer.</description>
    </item>
    
    <item>
      <title>delimit</title>
      <link>https://dochugo.christopheducamp.com/fonctions/delimit/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/delimit/</guid>
      <description>delimit called in your template takes the form of
{{ delimit array/slice/map delimiter optionallastdelimiter}}  delimit loops through any array, slice, or map and returns a string of all the values separated by a delimiter, the second argument in the function call. There is an optional third parameter that lets you choose a different delimiter to go between the last two values in the loop.
To maintain a consistent output order, maps will be sorted by keys and only a slice of the values will be returned.</description>
    </item>
    
    <item>
      <title>dict</title>
      <link>https://dochugo.christopheducamp.com/fonctions/dict/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/dict/</guid>
      <description>dict is especially useful for passing more than one value to a partial template.
Example: dict with Embedded SVGs The partial below creates a SVG and expects fill height and width from the caller:
layouts/partials/svgs/external-links.svg  &amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; fill=&amp;quot;{{ .fill }}&amp;quot; width=&amp;quot;{{ .size }}&amp;quot; height=&amp;quot;{{ .size }}&amp;quot; viewBox=&amp;quot;0 0 32 32&amp;quot; aria-label=&amp;quot;External Link&amp;quot;&amp;gt; &amp;lt;path d=&amp;quot;M25.152 16.576v5.696q0 2.144-1.504 3.648t-3.648 1.504h-14.848q-2.144 0-3.648-1.504t-1.504-3.648v-14.848q0-2.112 1.504-3.616t3.648-1.536h12.576q0.224 0 0.384 0.16t0.16 0.416v1.152q0 0.256-0.16 0.416t-0.384 0.</description>
    </item>
    
    <item>
      <title>echoParam</title>
      <link>https://dochugo.christopheducamp.com/fonctions/echoparam/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/echoparam/</guid>
      <description>{{ echoParam .Params &amp;quot;project_url&amp;quot; }}  </description>
    </item>
    
    <item>
      <title>emojify</title>
      <link>https://dochugo.christopheducamp.com/fonctions/emojify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/emojify/</guid>
      <description>emoji exécute une chaîne passée à travers le processeur d&amp;rsquo;émoticônes Emoji.
Voir l&amp;rsquo;anti-sèche Emoji pour les émoticônes disponibles.
La fonction emojify peut être appelée dans vos modèles, mais pas directement dans vos fichiers de contenu par défaut. Pour les emojis dans les fichiers de contenu, réglez enableEmoji sur true dans la configuration de votre site. Ensuite, vous pouvez écrire directement sur vos fichiers de contenu ; par exemple I :heart: Hugo !</description>
    </item>
    
    <item>
      <title>eq</title>
      <link>https://dochugo.christopheducamp.com/fonctions/eq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/eq/</guid>
      <description>{{ if eq .Section &amp;quot;blog&amp;quot; }}current{{ end }}  </description>
    </item>
    
    <item>
      <title>findRE</title>
      <link>https://dochugo.christopheducamp.com/fonctions/findre/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/findre/</guid>
      <description>By default all matches will be included. The number of matches can be limitted with an optional third parameter.
The example below returns a list of all second level headers (&amp;lt;h2&amp;gt;) in the content:
{{ findRE &amp;quot;&amp;lt;h2.*?&amp;gt;(.|\n)*?&amp;lt;/h2&amp;gt;&amp;quot; .Content }}  You can limit the number of matches in the list with a third parameter. The following example shows how to limit the returned value to just one match (or none, if there are no matched substrings):</description>
    </item>
    
    <item>
      <title>first</title>
      <link>https://dochugo.christopheducamp.com/fonctions/first/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/first/</guid>
      <description>{{ range first 10 .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot; }} {{ end }}  </description>
    </item>
    
    <item>
      <title>getenv</title>
      <link>https://dochugo.christopheducamp.com/fonctions/getenv/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/getenv/</guid>
      <description>Takes a string containing the name of the variable as input. Returns an empty string if the variable is not set, otherwise returns the value of the variable.
{{ getenv &amp;quot;HOME&amp;quot; }}   In Unix-like environments, the variable must also be exported in order to be seen by hugo.
  </description>
    </item>
    
    <item>
      <title>hasprefix</title>
      <link>https://dochugo.christopheducamp.com/fonctions/hasprefix/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/hasprefix/</guid>
      <description> {{ hasPrefix &amp;quot;Hugo&amp;quot; &amp;quot;Hu&amp;quot; }} → true  </description>
    </item>
    
    <item>
      <title>highlight</title>
      <link>https://dochugo.christopheducamp.com/fonctions/highlight/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/highlight/</guid>
      <description>highlight is used in Hugo&amp;rsquo;s built-in highlight shortcode.
See Installing Hugo for more information on Pygments or Syntax Highlighting for more options on how to add syntax highlighting to your code blocks with Hugo.</description>
    </item>
    
    <item>
      <title>htmlEscape</title>
      <link>https://dochugo.christopheducamp.com/fonctions/htmlescape/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/htmlescape/</guid>
      <description>In the result &amp;amp; becomes &amp;amp;amp; and so on. It escapes only: &amp;lt;, &amp;gt;, &amp;amp;, &#39; and &amp;quot;.
{{ htmlEscape &amp;quot;Hugo &amp;amp; Caddy &amp;gt; Wordpress &amp;amp; Apache&amp;quot; }} → &amp;quot;Hugo &amp;amp;amp; Caddy &amp;amp;gt; Wordpress &amp;amp;amp; Apache&amp;quot;  </description>
    </item>
    
    <item>
      <title>htmlUnescape</title>
      <link>https://dochugo.christopheducamp.com/fonctions/htmlunescape/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/htmlunescape/</guid>
      <description>htmlUnescape returns the given string with HTML escape codes un-escaped.
Remember to pass the output of this to safeHTML if fully un-escaped characters are desired. Otherwise, the output will be escaped again as normal.
{{ htmlUnescape &amp;quot;Hugo &amp;amp;amp; Caddy &amp;amp;gt; Wordpress &amp;amp;amp; Apache&amp;quot; }} → &amp;quot;Hugo &amp;amp; Caddy &amp;gt; Wordpress &amp;amp; Apache&amp;quot;  </description>
    </item>
    
    <item>
      <title>humanize</title>
      <link>https://dochugo.christopheducamp.com/fonctions/humanize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/humanize/</guid>
      <description>If the input is either an int64 value or the string representation of an integer, humanize returns the number with the proper ordinal appended.
{{humanize &amp;quot;my-first-post&amp;quot;}} → &amp;quot;My first post&amp;quot; {{humanize &amp;quot;myCamelPost&amp;quot;}} → &amp;quot;My camel post&amp;quot; {{humanize &amp;quot;52&amp;quot;}} → &amp;quot;52nd&amp;quot; {{humanize 103}} → &amp;quot;103rd&amp;quot;  </description>
    </item>
    
    <item>
      <title>i18n</title>
      <link>https://dochugo.christopheducamp.com/fonctions/i18n/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/i18n/</guid>
      <description>Ceci traduit un morceau de contenu basé sur vos fichiers i18n/en-US.yaml (et similaires). Vous pouvez utiliser les outils go-i18n pour gérer vos traductions. Les traductions peuvent exister tant pour le thème et à la racine de votre dépôt.
{{ i18n &amp;quot;translation_id&amp;quot; }}   T est un alias de i18n. par ex. {{ T &amp;quot;translation_id&amp;quot; }}.
  Pour plus d&amp;rsquo;informations sur les traductions de chaînes, voir Traduction de Chaînes en Mode Multilingue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dochugo.christopheducamp.com/fonctions/imageconfig/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/imageconfig/</guid>
      <description>{{ with (imageConfig &amp;quot;favicon.ico&amp;quot;) }} favicon.ico: {{.Width}} x {{.Height}} {{ end }}  </description>
    </item>
    
    <item>
      <title>in</title>
      <link>https://dochugo.christopheducamp.com/fonctions/in/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/in/</guid>
      <description>The elements supported are strings, integers and floats, although only float64 will match as expected.
In addition, in can also check if a substring exists in a string.
{{ if in .Params.tags &amp;quot;Git&amp;quot; }}Follow me on GitHub!{{ end }}  {{ if in &amp;quot;this string contains a substring&amp;quot; &amp;quot;substring&amp;quot; }}Substring found!{{ end }}  </description>
    </item>
    
    <item>
      <title>index</title>
      <link>https://dochugo.christopheducamp.com/fonctions/index-function/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/index-function/</guid>
      <description>From the Godocs:
 Returns the result of indexing its first argument by the following arguments. Thus &amp;ldquo;index x 1 2 3&amp;rdquo; is, in Go syntax, x[1][2][3]. Each indexed item must be a map, slice, or array.
 In Go templates, you can&amp;rsquo;t access array, slice, or map elements directly the same way you would in Go. For example, $.Site.Data.authors[.Params.authorkey] isn&amp;rsquo;t supported syntax.
Instead, you have to use index, a function that handles the lookup for you.</description>
    </item>
    
    <item>
      <title>int</title>
      <link>https://dochugo.christopheducamp.com/fonctions/int/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/int/</guid>
      <description>Useful for turning strings into numbers.
{{ int &amp;quot;123&amp;quot; }} → 123  </description>
    </item>
    
    <item>
      <title>intersect</title>
      <link>https://dochugo.christopheducamp.com/fonctions/intersect/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/intersect/</guid>
      <description>The elements supported are strings, integers, and floats (only float64).
A useful example of intersect functionality is a &amp;ldquo;related posts&amp;rdquo; block. isset allows us to create a list of links to other posts that have tags that intersect with the tags in the current post.
The following is an example of a &amp;ldquo;related posts&amp;rdquo; partial template that could be added to a single page template:
layouts/partials/related-posts.html  &amp;lt;ul&amp;gt; {{ $page_link := .</description>
    </item>
    
    <item>
      <title>isset</title>
      <link>https://dochugo.christopheducamp.com/fonctions/isset/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/isset/</guid>
      <description>Takes either a slice, array, or channel and an index or a map and a key as input.
{{ if isset .Params &amp;quot;project_url&amp;quot; }} {{ index .Params &amp;quot;project_url&amp;quot; }}{{ end }}   All site-level configuration keys are stored as lower case. Therefore, a myParam key-value set in your site configuration file needs to be accessed with {{if isset .Site.Params &amp;quot;myparam&amp;quot;}} and not with {{if isset .Site.Params &amp;quot;myParam&amp;quot;}}. Note that you can still access the same config key with .</description>
    </item>
    
    <item>
      <title>jsonify</title>
      <link>https://dochugo.christopheducamp.com/fonctions/jsonify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/jsonify/</guid>
      <description>{{ dict &amp;quot;title&amp;quot; .Title &amp;quot;content&amp;quot; .Plain | jsonify }}  See also the .PlainWords, .Plain, and .RawContent page variables.</description>
    </item>
    
    <item>
      <title>lang.NumFmt</title>
      <link>https://dochugo.christopheducamp.com/fonctions/numfmt/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/numfmt/</guid>
      <description>The default options value is - . ,.
Numbers greater than or equal to 5 are rounded up. For example, if precision is set to 0, 1.5 becomes 2, and 1.4 becomes 1.
{{ lang.NumFmt &amp;quot;,&amp;quot; &amp;quot;.&amp;quot; &amp;quot;-&amp;quot; 2 12345.6789 }} → 12.345,68 {{ lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;&amp;quot; &amp;quot;-&amp;quot; 6 -12345.6789 }} → -12345.678900 {{ lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;,&amp;quot; &amp;quot;-&amp;quot; 0 -12345.6789 }} → -12,346 {{ -98765.4321 | lang.NumFmt &amp;quot;.&amp;quot; &amp;quot;,&amp;quot; &amp;quot;-&amp;quot; 2 }} → -98,765.</description>
    </item>
    
    <item>
      <title>last</title>
      <link>https://dochugo.christopheducamp.com/fonctions/last/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/last/</guid>
      <description>{{ range last 10 .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot; }} {{ end }}  </description>
    </item>
    
    <item>
      <title>len</title>
      <link>https://dochugo.christopheducamp.com/fonctions/len/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/len/</guid>
      <description>len is a built-in function in Golang that returns the length of a variable according to its type. From the Golang documentation:
 Array: the number of elements in v.
Pointer to array: the number of elements in *v (even if v is nil).
Slice, or map: the number of elements in v; if v is nil, len(v) is zero.
String: the number of bytes in v.
Channel: the number of elements queued (unread) in the channel buffer; if v is nil, len(v) is zero.</description>
    </item>
    
    <item>
      <title>lower</title>
      <link>https://dochugo.christopheducamp.com/fonctions/lower/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/lower/</guid>
      <description>{{lower &amp;quot;BatMan&amp;quot;}} → &amp;quot;batman&amp;quot;  </description>
    </item>
    
    <item>
      <title>markdownify</title>
      <link>https://dochugo.christopheducamp.com/fonctions/markdownify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/markdownify/</guid>
      <description>{{ .Title | markdownify }}  </description>
    </item>
    
    <item>
      <title>md5</title>
      <link>https://dochugo.christopheducamp.com/fonctions/md5/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/md5/</guid>
      <description>{{ md5 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;b3029f756f98f79e7f1b7f1d1f0dd53b&amp;quot; --&amp;gt;  This can be useful if you want to use Gravatar for generating a unique avatar:
&amp;lt;img src=&amp;quot;https://www.gravatar.com/avatar/{{ md5 &amp;quot;your@email.com&amp;quot; }}?s=100&amp;amp;d=identicon&amp;quot;&amp;gt;  </description>
    </item>
    
    <item>
      <title>now</title>
      <link>https://dochugo.christopheducamp.com/fonctions/now/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/now/</guid>
      <description>See time.Time.
For example, building your site on June 24, 2017 with the following templating:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; {{ now.Format &amp;quot;2006&amp;quot;}}&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;  Which will produce the following:
&amp;lt;div&amp;gt; &amp;lt;small&amp;gt;&amp;amp;copy; 2017&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;  The above example uses the .Format function, which page includes a full listing of date formatting using Golang&amp;rsquo;s layout string.
 Older Hugo themes may use the deprecated .Now (uppercase). Be sure to use the lowercase .now in your templating.</description>
    </item>
    
    <item>
      <title>partialCached</title>
      <link>https://dochugo.christopheducamp.com/fonctions/partialcached/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/partialcached/</guid>
      <description>The partialCached template function can offer significant performance gains for complex templates that don&amp;rsquo;t need to be re-rendered on every invocation. Here is the simplest usage:
{{ partialCached &amp;quot;footer.html&amp;quot; . }}  You can also pass additional parameters to partialCached to create variants of the cached partial. For example, if you have a complex partial that should be identical when rendered for pages within the same section, you could use a variant based upon section so that the partial is only rendered once per section:</description>
    </item>
    
    <item>
      <title>plainify</title>
      <link>https://dochugo.christopheducamp.com/fonctions/plainify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/plainify/</guid>
      <description>{{ &amp;quot;&amp;lt;b&amp;gt;BatMan&amp;lt;/b&amp;gt;&amp;quot; | plainify }} → &amp;quot;BatMan&amp;quot;  See also the .PlainWords, .Plain, and .RawContent page variables.</description>
    </item>
    
    <item>
      <title>pluralize</title>
      <link>https://dochugo.christopheducamp.com/fonctions/pluralize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/pluralize/</guid>
      <description>{{ &amp;quot;cat&amp;quot; | pluralize }} → &amp;quot;cats&amp;quot;  </description>
    </item>
    
    <item>
      <title>printf</title>
      <link>https://dochugo.christopheducamp.com/fonctions/printf/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/printf/</guid>
      <description>See the go doc for additional information.
{{ i18n ( printf &amp;quot;combined_%s&amp;quot; $var ) }}  {{ printf &amp;quot;formatted %.2f&amp;quot; 3.1416 }}  </description>
    </item>
    
    <item>
      <title>querify</title>
      <link>https://dochugo.christopheducamp.com/fonctions/querify/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/querify/</guid>
      <description>querify takes a set of key-value pairs and returns a query string that can be appended to a URL. E.g.
The following example creates a link to a search results page on Google.
&amp;lt;a href=&amp;quot;https://www.google.com?{{ (querify &amp;quot;q&amp;quot; &amp;quot;test&amp;quot; &amp;quot;page&amp;quot; 3) | safeURL }}&amp;quot;&amp;gt;Search&amp;lt;/a&amp;gt;  This example renders the following HTML:
&amp;lt;a href=&amp;quot;https://www.google.com?page=3&amp;amp;q=test&amp;quot;&amp;gt;Search&amp;lt;/a&amp;gt;  </description>
    </item>
    
    <item>
      <title>range</title>
      <link>https://dochugo.christopheducamp.com/fonctions/range/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/range/</guid>
      <description>Just like in the Go programming language, Go and Hugo templates make heavy use of range to iterate over a map, array or slice.
range is fundamental to templating in Hugo. (See the Introduction to Hugo Templates for more examples.</description>
    </item>
    
    <item>
      <title>readDir</title>
      <link>https://dochugo.christopheducamp.com/fonctions/readdir/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/readdir/</guid>
      <description>If your current project working directory has a single file named README.txt:
{{ range (readDir &amp;quot;.&amp;quot;) }}{{ .Name }}{{ end }} → &amp;quot;README.txt&amp;quot;  For more information on using readDir and readFile in your templates, see Local File Templates.</description>
    </item>
    
    <item>
      <title>readFile</title>
      <link>https://dochugo.christopheducamp.com/fonctions/readfile/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/readfile/</guid>
      <description>Note that the filename must be relative to the current project working directory.
So, if you have a file with the name README.txt in the root of your project with the content Hugo Rocks!:
{{readFile &amp;quot;README.txt&amp;quot;}} → &amp;quot;Hugo Rocks!&amp;quot;  For more information on using readDir and readFile in your templates, see Local File Templates.</description>
    </item>
    
    <item>
      <title>ref</title>
      <link>https://dochugo.christopheducamp.com/fonctions/ref/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/ref/</guid>
      <description>ref and relRef look up a content page by relative path (relref) or logical name (ref) to return the permalink. Both functions require a Page object (usually satisfied with a &amp;ldquo;.&amp;rdquo;):
{{ relref . &amp;quot;about.md&amp;quot; }}  These functions are used in two of Hugo&amp;rsquo;s built-in shortcodes. You can see basic usage examples of both ref and relref in the shortcode documentation.
For an extensive explanation of how to leverage ref and relref for content management, see Cross References.</description>
    </item>
    
    <item>
      <title>relLangURL</title>
      <link>https://dochugo.christopheducamp.com/fonctions/rellangurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/rellangurl/</guid>
      <description>absLangURL and relLangURL functions are similar to their absURL and relURL relatives but will add the correct language prefix when the site is configured with more than one language. (See Configuring Multilingual.)
So for a site baseURL set to http://yoursite.com/hugo/ and the current language is en:
{{ &amp;quot;blog/&amp;quot; | absLangURL }} → &amp;quot;http://yoursite.com/hugo/en/blog/&amp;quot; {{ &amp;quot;blog/&amp;quot; | relLangURL }} → &amp;quot;/hugo/en/blog/&amp;quot;  </description>
    </item>
    
    <item>
      <title>relURL</title>
      <link>https://dochugo.christopheducamp.com/fonctions/relurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/relurl/</guid>
      <description>Both absURL and relURL consider the configured value of baseURL in your site&amp;rsquo;s config file. Given a baseURL set to http://yoursite.com/hugo/:
{{ &amp;quot;mystyle.css&amp;quot; | absURL }} → &amp;quot;http://yoursite.com/hugo/mystyle.css&amp;quot; {{ &amp;quot;mystyle.css&amp;quot; | relURL }} → &amp;quot;/hugo/mystyle.css&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | relURL }} → &amp;quot;http://gohugo.io/&amp;quot; {{ &amp;quot;http://gohugo.io/&amp;quot; | absURL }} → &amp;quot;http://gohugo.io/&amp;quot;  The last two examples may look strange but can be very useful. For example, the following shows how to use absURL in JSON-LD structured data for SEO where some of your images for a piece of content may or may not be hosted locally:</description>
    </item>
    
    <item>
      <title>relref</title>
      <link>https://dochugo.christopheducamp.com/fonctions/relref/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/relref/</guid>
      <description>ref and relRef look up a content page by relative path (relref) or logical name (ref) to return the permalink. Both functions require a Page object (usually satisfied with a &amp;ldquo;.&amp;rdquo;):
{{ relref . &amp;quot;about.md&amp;quot; }}  These functions are used in two of Hugo&amp;rsquo;s built-in shortcodes. You can see basic usage examples of both ref and relref in the shortcode documentation.
For an extensive explanation of how to leverage ref and relref for content management, see Cross References.</description>
    </item>
    
    <item>
      <title>render</title>
      <link>https://dochugo.christopheducamp.com/fonctions/render/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/render/</guid>
      <description>The view is an alternative layout and should be a file name that points to a template in one of the locations specified in the documentation for Content Views.
This function is only available when applied to a single piece of content within a list context.
This example could render a piece of content using the content view located at /layouts/_default/summary.html:
{{ range .Data.Pages }} {{ .Render &amp;quot;summary&amp;quot;}} {{ end }}  </description>
    </item>
    
    <item>
      <title>replace</title>
      <link>https://dochugo.christopheducamp.com/fonctions/replace/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/replace/</guid>
      <description>`{{ replace &amp;quot;Batman and Robin&amp;quot; &amp;quot;Robin&amp;quot; &amp;quot;Catwoman&amp;quot; }}` → &amp;quot;Batman and Catwoman&amp;quot;  </description>
    </item>
    
    <item>
      <title>replacere</title>
      <link>https://dochugo.christopheducamp.com/fonctions/replacere/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/replacere/</guid>
      <description>{{ replaceRE &amp;quot;^https?://([^/]+).*&amp;quot; &amp;quot;$1&amp;quot; &amp;quot;http://gohugo.io/docs&amp;quot; }}` → &amp;quot;gohugo.io&amp;quot; {{ &amp;quot;http://gohugo.io/docs&amp;quot; | replaceRE &amp;quot;^https?://([^/]+).*&amp;quot; &amp;quot;$1&amp;quot; }}` → &amp;quot;gohugo.io&amp;quot;   Hugo uses Golang&amp;rsquo;s Regular Expression package, which is the same general syntax used by Perl, Python, and other languages but with a few minor differences for those coming from a background in PCRE. For a full syntax listing, see the GitHub wiki for re2.
If you are just learning RegEx, or at least Golang&amp;rsquo;s flavor, you can practice pattern matching in the browser at https://regex101.</description>
    </item>
    
    <item>
      <title>safeCSS</title>
      <link>https://dochugo.christopheducamp.com/fonctions/safecss/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/safecss/</guid>
      <description>In this context, safe means CSS content that matches any of the following:
 The CSS3 stylesheet production, such as p { color: purple }. The CSS3 rule production, such as a[href=~&amp;quot;https:&amp;quot;].foo#bar. CSS3 declaration productions, such as color: red; margin: 2px. The CSS3 value production, such as rgba(0, 0, 255, 127).  Example: Given style = &amp;quot;color: red;&amp;quot; defined in the front matter of your .md file:
 &amp;lt;p style=&amp;quot;{{ .</description>
    </item>
    
    <item>
      <title>safeHTML</title>
      <link>https://dochugo.christopheducamp.com/fonctions/safehtml/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/safehtml/</guid>
      <description>It should not be used for HTML from a third-party, or HTML with unclosed tags or comments.
Given a site-wide config.toml with the following copyright value:
copyright = &amp;quot;© 2015 Jane Doe. &amp;lt;a href=\&amp;quot;http://creativecommons.org/licenses/by/4.0/\&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;.&amp;quot;  {{ .Site.Copyright | safeHTML }} in a template would then output:
© 2015 Jane Doe. &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/4.0/&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;.  However, without the safeHTML function, html/template assumes .Site.Copyright to be unsafe and therefore escapes all HTML tags and renders the whole string as plain text:</description>
    </item>
    
    <item>
      <title>safeHTMLAttr</title>
      <link>https://dochugo.christopheducamp.com/fonctions/safehtmlattr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/safehtmlattr/</guid>
      <description>Example: Given a site-wide config.toml that contains this menu entry:
[[menu.main]] name = &amp;quot;IRC: #golang at freenode&amp;quot; url = &amp;quot;irc://irc.freenode.net/#golang&amp;quot;   &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt; &amp;rarr; &amp;lt;a href=&amp;quot;#ZgotmplZ&amp;quot;&amp;gt; &amp;lt;a {{ printf &amp;quot;href=%q&amp;quot; .URL | safeHTMLAttr }}&amp;gt; &amp;rarr; &amp;lt;a href=&amp;quot;irc://irc.freenode.net/#golang&amp;quot;&amp;gt;  </description>
    </item>
    
    <item>
      <title>safeJS</title>
      <link>https://dochugo.christopheducamp.com/fonctions/safejs/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/safejs/</guid>
      <description>In this context, safe means the string encapsulates a known safe EcmaScript5 Expression (e.g., (x + y * z())).
Template authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like { foo:bar() }\n[&#39;foo&#39;](), which is both a valid expression and a valid program with a very different meaning.
Example: Given hash = &amp;quot;619c16f&amp;quot; defined in the front matter of your .</description>
    </item>
    
    <item>
      <title>safeURL</title>
      <link>https://dochugo.christopheducamp.com/fonctions/safeurl/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/safeurl/</guid>
      <description>safeURL declares the provided string as a &amp;ldquo;safe&amp;rdquo; URL or URL substring (see RFC 3986). A URL like javascript:checkThatFormNotEditedBeforeLeavingPage() from a trusted source should go in the page, but by default dynamic javascript: URLs are filtered out since they are a frequently exploited injection vector.
Without safeURL, only the URI schemes http:, https: and mailto: are considered safe by Go templates. If any other URI schemes (e.g., irc: and javascript:) are detected, the whole URL will be replaced with #ZgotmplZ.</description>
    </item>
    
    <item>
      <title>seq</title>
      <link>https://dochugo.christopheducamp.com/fonctions/seq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/seq/</guid>
      <description>It&amp;rsquo;s named and used in the model of GNU&amp;rsquo;s seq.
3 → 1, 2, 3 1 2 4 → 1, 3 -3 → -1, -2, -3 1 4 → 1, 2, 3, 4 1 -2 → 1, 0, -1, -2  Example: seq with range and after You can use seq in combination with range and after. The following will return 19 elements:
{{ range after 1 (seq 20)}} {{ end }}  However, when ranging with an index, the following may be less confusing in that $indexStartingAt1 and $num will return 1,2,3 .</description>
    </item>
    
    <item>
      <title>sha</title>
      <link>https://dochugo.christopheducamp.com/fonctions/sha/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/sha/</guid>
      <description>sha1 hashes the given input and returns its SHA1 checksum.
{{ sha1 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;c8b5b0e33d408246e30f53e32b8f7627a7a649d4&amp;quot; --&amp;gt;  sha256 hashes the given input and returns its SHA256 checksum.
{{ sha256 &amp;quot;Hello world, gophers!&amp;quot; }} &amp;lt;!-- returns the string &amp;quot;6ec43b78da9669f50e4e422575c54bf87536954ccd58280219c393f2ce352b46&amp;quot; --&amp;gt;  </description>
    </item>
    
    <item>
      <title>shuffle</title>
      <link>https://dochugo.christopheducamp.com/fonctions/shuffle/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/shuffle/</guid>
      <description>shuffle-input.html  &amp;lt;!-- Shuffled sequence = --&amp;gt; &amp;lt;div&amp;gt;{{ shuffle (seq 1 5) }}&amp;lt;/div&amp;gt; &amp;lt;!-- Shuffled slice = --&amp;gt; &amp;lt;div&amp;gt;{{ shuffle (slice &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;buzz&amp;quot;) }}&amp;lt;/div&amp;gt;    This example would return the following:
 shuffle-output.html &amp;lt;!-- Shuffled sequence = --&amp;gt; &amp;lt;div&amp;gt;2 5 3 1 4&amp;lt;/div&amp;gt; &amp;lt;!-- Shuffled slice = --&amp;gt; &amp;lt;div&amp;gt;buzz foo bar&amp;lt;/div&amp;gt;   
This example also makes use of the slice and seq functions.</description>
    </item>
    
    <item>
      <title>singularize</title>
      <link>https://dochugo.christopheducamp.com/fonctions/singularize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/singularize/</guid>
      <description>{{ &amp;quot;cats&amp;quot; | singularize }} → &amp;ldquo;cat&amp;rdquo;
See also the .Data.Singular taxonomy variable for singularizing taxonomy names.</description>
    </item>
    
    <item>
      <title>slice</title>
      <link>https://dochugo.christopheducamp.com/fonctions/slice/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/slice/</guid>
      <description>One use case is the concatenation of elements in combination with the delimit function:
slice.html  {{ delimit (slice &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;buzz&amp;quot;) &amp;quot;, &amp;quot; }} &amp;lt;!-- returns the string &amp;quot;foo, bar, buzz&amp;quot; --&amp;gt;    </description>
    </item>
    
    <item>
      <title>slicestr</title>
      <link>https://dochugo.christopheducamp.com/fonctions/slicestr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/slicestr/</guid>
      <description>For example, 1 and 4 creates a slice including elements 1 through 3. The end index can be omitted; it defaults to the string&amp;rsquo;s length.
 {{slicestr &amp;quot;BatMan&amp;quot; 3}} → &amp;ldquo;Man&amp;rdquo; {{slicestr &amp;quot;BatMan&amp;quot; 0 3}} → &amp;ldquo;Bat&amp;rdquo;  </description>
    </item>
    
    <item>
      <title>sort</title>
      <link>https://dochugo.christopheducamp.com/fonctions/sort/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/sort/</guid>
      <description>A sorted array of map values will be returned with the keys eliminated. There are two optional arguments: sortByField and sortAsc. If left blank, sort will sort by keys (for maps) in ascending order as its default behavior.
+++ #tags: [ &amp;quot;tag3&amp;quot;, &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot; ] +++ // Site config +++ [params.authors] [params.authors.Derek] &amp;quot;firstName&amp;quot; = &amp;quot;Derek&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Perkins&amp;quot; [params.authors.Joe] &amp;quot;firstName&amp;quot; = &amp;quot;Joe&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Bergevin&amp;quot; [params.authors.Tanner] &amp;quot;firstName&amp;quot; = &amp;quot;Tanner&amp;quot; &amp;quot;lastName&amp;quot; = &amp;quot;Linsley&amp;quot; +++  // Use default sort options - sort by key / ascending Tags: {{ range sort .</description>
    </item>
    
    <item>
      <title>split</title>
      <link>https://dochugo.christopheducamp.com/fonctions/split/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/split/</guid>
      <description> {{split &amp;quot;tag1,tag2,tag3&amp;quot; &amp;quot;,&amp;quot; }} → [&amp;ldquo;tag1&amp;rdquo; &amp;ldquo;tag2&amp;rdquo; &amp;ldquo;tag3&amp;rdquo;]  </description>
    </item>
    
    <item>
      <title>string</title>
      <link>https://dochugo.christopheducamp.com/fonctions/string/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/string/</guid>
      <description> {{string &amp;quot;BatMan&amp;quot;}} → &amp;ldquo;BatMan&amp;rdquo;  </description>
    </item>
    
    <item>
      <title>substr</title>
      <link>https://dochugo.christopheducamp.com/fonctions/substr/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/substr/</guid>
      <description>It normally takes two parameters: start and length. It can also take one parameter: start, i.e. length is omitted, in which case the substring starting from start until the end of the string will be returned.
To extract characters from the end of the string, use a negative start number.
In addition, borrowing from the extended behavior described at http://php.net substr, if length is given and is negative, that number of characters will be omitted from the end of string.</description>
    </item>
    
    <item>
      <title>time</title>
      <link>https://dochugo.christopheducamp.com/fonctions/time/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/time/</guid>
      <description>time converts a timestamp string into a time.Time structure so you can access its fields:
{{ time &amp;quot;2016-05-28&amp;quot; }} → &amp;quot;2016-05-28T00:00:00Z&amp;quot; {{ (time &amp;quot;2016-05-28&amp;quot;).YearDay }} → 149 {{ mul 1000 (time &amp;quot;2016-05-28T10:30:00.00+10:00&amp;quot;).Unix }} → 1464395400000, or Unix time in milliseconds  Example: Using time to get Month Index The following example takes a UNIX timestamp&amp;mdash;set as utimestamp: &amp;quot;1489276800&amp;quot; in a content&amp;rsquo;s front matter&amp;mdash;converts the timestamp (string) to an integer using the int function, and then uses printf to convert the Month property of time into an index.</description>
    </item>
    
    <item>
      <title>title</title>
      <link>https://dochugo.christopheducamp.com/fonctions/title/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/title/</guid>
      <description>{{title &amp;quot;BatMan&amp;quot;}}` → &amp;quot;Batman&amp;quot;  </description>
    </item>
    
    <item>
      <title>trim</title>
      <link>https://dochugo.christopheducamp.com/fonctions/trim/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/trim/</guid>
      <description>{{ trim &amp;quot;++Batman--&amp;quot; &amp;quot;+-&amp;quot; }} → &amp;quot;Batman&amp;quot;  trim requires the second argument, which tells the function specifically what to remove from the first argument. There is no default value for the second argument, so the following usage will not work:
{{ trim .Inner}}  Instead, the following example tells trim to remove extra new lines from the content contained in the shortcode .Inner variable:
{{ trim .Inner &amp;quot;\n&amp;quot; }}   Go templates also provide a simple method for trimming whitespace from either side of a Go tag by including a hyphen (-).</description>
    </item>
    
    <item>
      <title>truncate</title>
      <link>https://dochugo.christopheducamp.com/fonctions/truncate/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/truncate/</guid>
      <description>Since Go templates are HTML-aware, truncate will intelligently handle normal strings vs HTML strings:
{{ &amp;quot;&amp;lt;em&amp;gt;Keep my HTML&amp;lt;/em&amp;gt;&amp;quot; | safeHTML | truncate 10 }}` → &amp;lt;em&amp;gt;Keep my …&amp;lt;/em&amp;gt;`   If you have a raw string that contains HTML tags you want to remain treated as HTML, you will need to convert the string to HTML using the safeHTML template function before sending the value to truncate. Otherwise, the HTML tags will be escaped when passed through the truncate function.</description>
    </item>
    
    <item>
      <title>union</title>
      <link>https://dochugo.christopheducamp.com/fonctions/union/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/union/</guid>
      <description>Given two arrays (or slices) A and B, this function will return a new array that contains the elements or objects that belong to either A or to B or to both. The elements supported are strings, integers, and floats (only float64).
{{ union (slice 1 2 3) (slice 3 4 5) }} &amp;lt;!-- returns [1 2 3 4 5] --&amp;gt; {{ union (slice 1 2 3) nil }} &amp;lt;!-- returns [1 2 3] --&amp;gt; {{ union nil (slice 1 2 3) }} &amp;lt;!</description>
    </item>
    
    <item>
      <title>uniq</title>
      <link>https://dochugo.christopheducamp.com/fonctions/uniq/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/uniq/</guid>
      <description>{{ uniq (slice 1 2 3 2) }} {{ slice 1 2 3 2 | uniq }} &amp;lt;!-- both return [1 2 3] --&amp;gt;  </description>
    </item>
    
    <item>
      <title>upper</title>
      <link>https://dochugo.christopheducamp.com/fonctions/upper/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/upper/</guid>
      <description>Note that upper can be applied in your templates in more than one way:
{{ upper &amp;quot;BatMan&amp;quot; }} → &amp;quot;BATMAN&amp;quot; {{ &amp;quot;BatMan&amp;quot; | upper }} → &amp;quot;BATMAN&amp;quot;  </description>
    </item>
    
    <item>
      <title>urlize</title>
      <link>https://dochugo.christopheducamp.com/fonctions/urlize/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/urlize/</guid>
      <description>The following examples pull from a content file with the following front matter:
content/blog/greatest-city.md +++ title = &amp;quot;The World&#39;s Greatest City&amp;quot; location = &amp;quot;Chicago IL&amp;quot; tags = [&amp;quot;pizza&amp;quot;,&amp;quot;beer&amp;quot;,&amp;quot;hot dogs&amp;quot;] +++    The following might be used as a partial within a single page template:
layouts/partials/content-header.html  &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;{{.Title}}&amp;lt;/h1&amp;gt; {{ with .Params.location }} &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;/locations/{{ . | urlize}}&amp;quot;&amp;gt;{{.}}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; {{ end }} &amp;lt;!-- Creates a list of tags for the content and links to each of their pages --&amp;gt; {{ with .</description>
    </item>
    
    <item>
      <title>where</title>
      <link>https://dochugo.christopheducamp.com/fonctions/where/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/where/</guid>
      <description>where filters an array to only the elements containing a matching value for a given field.
{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }} {{ .Content }} {{ end }}  It can be used by dot-chaining the second argument to refer to a nested element of a value.
+++ series: golang +++  {{ range where .Site.Pages &amp;quot;Params.series&amp;quot; &amp;quot;golang&amp;quot; }} {{ .Content }} {{ end }}  It can also be used with the logical operators !</description>
    </item>
    
    <item>
      <title>with</title>
      <link>https://dochugo.christopheducamp.com/fonctions/with/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/fonctions/with/</guid>
      <description>An alternative way of writing an if statement and then referencing the same value is to use with instead. with rebinds the context (.) within its scope and skips the block if the variable is absent or unset.
The following example checks for a user-defined site variable called twitteruser. If the key-value is not set, the following will render nothing:
layouts/partials/twitter.html  {{with .Site.Params.twitteruser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.</description>
    </item>
    
    <item>
      <title>December Hugo Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-18/</link>
      <pubDate>Fri, 30 Dec 2016 13:54:02 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-18/</guid>
      <description>Hugo 0.18.1 is a bug fix release fixing some issues introduced in Hugo 0.18:
 Fix 32-bit binaries #2847  Fix issues with preserveTaxonomyNames #2809  Fix .URL for taxonomy pages when uglyURLs=true #2819  Fix IsTranslated and Translations for node pages #2812  Make template error messages more verbose #2820   0.18.0 December 19th 2016 Today, we&amp;rsquo;re excited to release the much-anticipated Hugo 0.18!
We&amp;rsquo;re heading towards the end of the year 2016, and we can look back on three releases and a steady growing community around the project.</description>
    </item>
    
    <item>
      <title>October Release: Hugo is going global</title>
      <link>https://dochugo.christopheducamp.com/news/0-17/</link>
      <pubDate>Fri, 07 Oct 2016 13:54:06 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-17/</guid>
      <description>Hugo is going global with our 0.17 release. We put a lot of thought into how we could extend Hugo to support multilingual websites with the most simple and elegant experience. Hugo&amp;rsquo;s multilingual capabilities rival the best web and documentation software, but Hugo&amp;rsquo;s experience is unmatched. If you have a single language website, the simple Hugo experience you already love is unchanged. Adding additional languages to your website is simple and straightforward.</description>
    </item>
    
    <item>
      <title>June Release</title>
      <link>https://dochugo.christopheducamp.com/news/0-16/</link>
      <pubDate>Mon, 06 Jun 2016 13:54:06 -0400</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/0-16/</guid>
      <description>Hugo 0.16 is our best and biggest release ever. The Hugo community has outdone itself with continued performance improvements, beautiful themes for all types of sites from project sites to documentation to blogs to portfolios, and increased stability.
This release represents over 550 contributions by over 110 contributors to the main Hugo code base. Since last release Hugo has gained 3500 stars, 90 contributors and 23 additional themes.
This release celebrates 3 years since @spf13 wrote the first lines of Hugo.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://dochugo.christopheducamp.com/news/release-notes/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/news/release-notes/</guid>
      <description>0.20.2 April 16th 2017 Hugo 0.20.2 adds support for plain text partials included into HTML templates. This was a side-effect of the big new Custom Output Format feature in 0.20, and while the change was intentional and there was an ongoing discussion about fixing it in #3273 , it did break some themes. There were valid workarounds for these themes, but we might as well get it right.
The most obvious use case for this is inline CSS styles, which you now can do without having to name your partials with a html suffix.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dochugo.christopheducamp.com/readfiles/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/readfiles/readme/</guid>
      <description>readdirs Répertoire pour Contenu Réutilisable Les fichiers dans ce dossier sont :
 Utilisés plus d&amp;rsquo;une fois dans la doc Hugo Utilisés dans les exemples de readdir (par ex. dans des modèles de fichiers locaux)  Ces fichiers sont appelés en utilisant le shortcode readfile (source).
Vous pouvez appeler ce shortcode dans les docs comme suit :
{{% readfile file=&amp;ldquo;/path/to/file.txt&amp;rdquo; markdown=&amp;ldquo;true&amp;rdquo; %}}
markdown=&amp;quot;true&amp;quot; est facultatif (default = &amp;quot;false&amp;quot;) et analyse la chaîne à travers le rendu Blacfriday.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dochugo.christopheducamp.com/readfiles/bfconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/readfiles/bfconfig/</guid>
      <description>taskLists default: true
Blackfriday flag: Purpose: false turns off GitHub-style automatic task/TODO list generation smartypants default: true Blackfriday flag: HTML_USE_SMARTYPANTS Purpose: false disables smart punctuation substitutions, including smart quotes, smart dashes, smart fractions, etc. If true, it may be fine-tuned with the angledQuotes, fractions, smartDashes, and latexDashes flags (see below). angledQuotes default: false
Blackfriday flag: HTML_SMARTYPANTS_ANGLED_QUOTES
Purpose: true enables smart, angled double quotes. Example: &amp;ldquo;Hugo&amp;rdquo; renders to renders to «Hugo» instead of “Hugo”.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dochugo.christopheducamp.com/readfiles/dateformatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/readfiles/dateformatting/</guid>
      <description>Go templates format your dates according to a single reference time:
Mon Jan 2 15:04:05 MST 2006  You can think of MST as 07, thus making the reference format string a sequence of numbers. The following is taken directly from the Go docs:
Jan 2 15:04:05 2006 MST 1 2 3 4 5 6 -7  Hugo Date Templating Reference Each of the following examples show the reference formatting string followed by the string Hugo will output in your HTML.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dochugo.christopheducamp.com/readfiles/menuvars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/readfiles/menuvars/</guid>
      <description> .URL string .Name string .Menu string .Identifier string .Pre template.HTML .Post template.HTML .Weight int .Parent string .Children Menu  Note that menus also have the following functions available as well:
 .HasChildren boolean  Additionally, there are some relevant functions available to menus on a page:
 .IsMenuCurrent (menu string, menuEntry *MenuEntry ) boolean .HasMenuCurrent (menu string, menuEntry *MenuEntry) boolean  </description>
    </item>
    
    <item>
      <title>Crédits</title>
      <link>https://dochugo.christopheducamp.com/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/credits/</guid>
      <description>contributeurs github .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @vjeantet 161 commits   @matcornic 49 commits   @gwleclerc 20 commits   @lierdakil 16 commits   @Xipas 5 commits   @altinnadmin 4 commits   @Thiht 2 commits   @vielmetti 1 commits   @erikjasiak 1 commits   @giuliov 1 commits   @tarpdalton 1 commits   @JohnBlood 1 commits   @jose-oc 1 commits   @kamilchm 1 commits   @ripienaar 1 commits   @shazic 1 commits   @viertaxa 1 commits   @uweschaefer 1 commits   @justin-yan 1 commits   @xxxtonixxx 1 commits   autres contributeurs  @bep support et conseils en français   @Jamstatic support et conseil en français   @Christophe Ducamp traduction</description>
    </item>
    
    <item>
      <title>Variantes de thèmes</title>
      <link>https://dochugo.christopheducamp.com/chantier-doc-hugo/customize-style/theme-variants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dochugo.christopheducamp.com/chantier-doc-hugo/customize-style/theme-variants/</guid>
      <description>Dans le fichier de configuration du site, vous pouvez régler un nom de variante de ce thème pour charger une css spécifique, avec différentes spécifications de couleurs.
ajoutez un param themeVariant = &amp;quot;NOM_VARIANTe&amp;quot; dans votre fichier config.toml.
La variantes disponibles ne modifient que les couleurs pour l&amp;rsquo;instant Variante &amp;ldquo;gray&amp;rdquo; themeVariant = &amp;quot;gray&amp;quot;
Variante &amp;ldquo;gold&amp;rdquo; themeVariant = &amp;quot;gold&amp;quot;
Variant &amp;ldquo;green&amp;rdquo; themeVariant = &amp;quot;green&amp;quot;</description>
    </item>
    
  </channel>
</rss>